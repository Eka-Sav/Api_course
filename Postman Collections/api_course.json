{
  "info": {
    "_postman_id": "87348f0d-8712-46e9-84d2-abebae28ade3",
    "name": "New Collection Copy",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "name": "mains",
      "item": [
        {
          "name": "console.log",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "31678da1-aadb-4bbc-825b-9c532b59982d",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "6297e4ce-aaf4-4f71-be60-870cb685e4dc",
                "exec": [
                  "    var jsonData = pm.response.json();\r",
                  "    \r",
                  "    //pm.expect это сам тест, то что ожидает сама фукнцмия, значит если console.log будет стоять после pm, то фукнция проверку уже не пройдет.\r",
                  "    //pm - это объект Postnam, который позволяет писать тесты. У него есть функция test,которая внутри себя принимает 2 аргумента: простая строка - навазине теста, функция с самим тестов. Внутри который мы пишет атотест.\r",
                  "pm.test(\"Your test name\", function () {\r",
                  "\r",
                  "    pm.expect(jsonData.value).to.eql(100);\r",
                  "    console.log(jsonData);\r",
                  "});\r",
                  "\r",
                  "//правильный вариант\r",
                  "pm.test(\"Your test name\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    console.log(jsonData);\r",
                  "    pm.expect(jsonData.value).to.eql(100);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "\r",
                  "//РАСПОЛОЖЕНИЕ console.log с переменными\r",
                  "//Если переменная не глобальная, то есть есть var, let, const, то log должен быть {} иначе выдаст ошибку\r",
                  "pm.test(\"Your test name\", function () {\r",
                  "    let jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.value).to.eql(100);\r",
                  "});\r",
                  "    console.log(jsonData);\r",
                  "\r",
                  "//Правильный вариант log с с заявлением переменных var, let, const,\r",
                  "pm.test(\"Your test name\", function () {\r",
                  "    const jsonData = pm.response.json();\r",
                  "    console.log(jsonData);\r",
                  "    pm.expect(jsonData.value).to.eql(100);\r",
                  "});\r",
                  "\r",
                  "//если переменная глобальная, то есть не будет var, let, const - то consile.log будет видео всегда и он может быть за пределами {}\r",
                  "pm.test(\"Your test name\", function () {\r",
                  "    jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.value).to.eql(100);\r",
                  "});\r",
                  "    console.log(jsonData);\r",
                  "\r",
                  "\r",
                  "//выводит общие значения объекта в ответе\r",
                  "console.log (pm.response)\r",
                  "// выводит отправленные параметры json объекта который представляет собой пары ключ-значение. обе строки одинаковые\r",
                  "console.log (pm.response.json())\r",
                  "console.log (jsonData)\r",
                  "\r",
                  "\r",
                  "// консоль console.log(jsonData); или console.log(pm.response.json()); выводят объект: тело ответа. Например. если нужно написать тест на то, что почта уже есть в базе, и должно прийти сообщение о не уникальности. Оба лога ниже идеинтичные, либо можно использовать переменную var, либо функцию pm.response.json() Зписывать переменную, нежели фукцию уменьшает/ упрощает запись\r",
                  "pm.test(\"Your test name\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    console.log(pm.response);\r",
                  "    console.log(jsonData);\r",
                  "    pm.expect(jsonData.value).to.eql(200);\r",
                  "});  \r",
                  "\r",
                  "pm.test(\"Your test name\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    console.log(pm.response);\r",
                  "    console.log(pm.response.json());\r",
                  "    pm.expect(pm.response.json().value).to.eql(200);\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "f7516902-84c4-4cf3-b36e-23be102d6c75",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "api_key",
                "value": "ce3d045144724f2b9ad070180f3c7b82",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation createOrganization ($command: InputCreateOrganizationType!) {\ncreateOrganization (command: $command) {\nid\nname\naddresses {\nitems {\ncity\ncountryCode\ncountryName\nregionId\nregionName\npostalCode\nline1\nzip\n}\n}   \n}\n} ",
                "variables": "{\n\"command\": {\n\"name\":\"{{organization_name}}\",   \n\"addresses\": [{\n\"addressType\": 1,\n\"city\": \"111\",\n\"countryCode\": \"USA\",\n\"countryName\": \"United States of America\",\n\"regionId\": \"AL\",\n\"regionName\": \"Alabama\",\n\"postalCode\": \"111111\",\n\"line1\": \"Adress line 1\",\n\"zip\": \"222222\"\n}]     \n}\n}"
              },
              "options": {
                "graphql": {}
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "string",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "0fc55818-63d8-4490-b6c7-45ace7cc57f4",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "5e36e4a1-81db-42b3-a935-a367ff5e94aa",
                "exec": [
                  "/*\r",
                  "// ДЛИНА строки\r",
                  "pm.test(\"Длина organization name\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.data.createOrganization.name.length).to.eql(19);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "// ПОИСК ПО СТРОКЕ\r",
                  "//indexOf вернет индекс первоного вхождения слова в строке. В данном примере на номере символа 10. Номерация идет с 0. \r",
                  "var txt = \"Я хочу на море, море\"\r",
                  "txt.indexOf(\"море\")\r",
                  "console.log(\"indexOf: \" + txt.indexOf(\"море\"));\r",
                  "console.log(\"lastIndexOf: \" + txt.lastIndexOf(\"море\"));\r",
                  "console.log(\"search: \" + txt.search(\"море\"));\r",
                  "\r",
                  "//Поиск послледнего вхождения в строку lastIndexOf. В данном примере на номере символа 16\r",
                  "txt.lastIndexOf(\"море\")\r",
                  "\r",
                  "//Если строка не нашлась метод вернет значение -1\r",
                  "console.log(\"солнце indexOf: \" + txt.indexOf(\"солнце\"));\r",
                  "\r",
                  "// В  поиске indexOf МОЖНО указать 2-й параметр. Это стартовый номер символа, с которого будет начинаться поиск ДАЛЬШЕ В КОНЕЦ СТРОКИ.В данном примере на номере символа 16\r",
                  "txt.indexOf(\"море\", 11);\r",
                  "// В  поиске lastIndexOf можно указать 2-й параметр. Это стартовый номер символа, с которого будет начинаться поиск К НАЧАЛУ СТРОКИ.В данном примере на номере символа 10\r",
                  "txt.lastIndexOf(\"море\", 11);\r",
                  "console.log(\"indexOf 11: \" + txt.indexOf(\"море\", 11));\r",
                  "console.log(\"lastIndexOf 11: \" + txt.lastIndexOf(\"море\", 11));\r",
                  "\r",
                  "// РЕГИСТРОЗАВИСИМОСТЬ\r",
                  "console.log(\"РЕГИСТРОЗАВИСИМОСТЬ indexOf : \" + txt.indexOf(\"МОРЕ\"));\r",
                  "console.log(\"РЕГИСТРОЗАВИСИМОСТЬ lastIndexOf : \" + txt.lastIndexOf(\"МОРЕ\"));\r",
                  "console.log(\"РЕГИСТРОЗАВИСИМОСТЬ search : \" + txt.search(\"МОРЕ\"));\r",
                  "\r",
                  "// SEARCH похож на index - ищет строку в строке и вернет ее позицию. В данном примере на номере символа 10\r",
                  "txt.search(\"море\");\r",
                  "\r",
                  "// разница INDEX OF и SEARCH\r",
                  "// разница SEARCH - нет 2-го аргумента, с позиции откуда начинать считать. То есть второй параметр не сработает.\r",
                  "console.log(\"search 11: \" + txt.search(\"море\", 11));\r",
                  "// разница INDEX OF - нет всей мощности поиска (включая регулярные выражения)\r",
                  "// РЕГУЛЯРНЫЕ ВЫРАЖЕНИЯ: сработает только для search. /строка/i - делает поиск НЕ егистрозависимым\r",
                  "console.log(\"регулярка indexOf : \" + txt.indexOf(/МОРЕ/i));\r",
                  "console.log(\"регулярка lastIndexOf: \" + txt.lastIndexOf(/МОРЕ/i));\r",
                  "console.log(\"регулярка search: \" + txt.search(/МОРЕ/i));\r",
                  "\r",
                  "\r",
                  "// ПОИСК СТРОКИ В СТРОКЕ\r",
                  "console.log(\"по строке indexOf : \" + txt.indexOf(\"хочу на море\"));\r",
                  "console.log(\"по строке lastIndexOf: \" + txt.lastIndexOf(\"хочу на море\"));\r",
                  "console.log(\"по строке search: \" + txt.search(\"хочу на море\"));\r",
                  "\r",
                  "// ИЗВЛЕЧЕНИЕ КУСКА ИЗ СТРОКИ\r",
                  "// SLICE\r",
                  "// Этот метод вырежет из строки нужный кусокю 8 - откуда начинаем вырезать, 13 символ - последняя позиция для вырезания, она не включена в выборку.\r",
                  "var fruits = \"apple, orange, mango\"\r",
                  "fruits.slice(8, 13)\r",
                  "console.log(\"slice от начала: \" + fruits.slice(7, 13));\r",
                  "// метод будет начинать счет с конца. -13 не влючено, -8 символ влючен \r",
                  "fruits.slice(-13, -7)\r",
                  "console.log(\"slice с конца: \" + fruits.slice(-13, -7));\r",
                  "// метод вырежет от 8 элемента и до конца строки\r",
                  "fruits.slice(7)\r",
                  "console.log(\"slice с 7: \" + fruits.slice(7));\r",
                  "// метод вырежет с 13 элемента и до начала строки\r",
                  "fruits.slice(-13)\r",
                  "console.log(\"slice с -13: \" + fruits.slice(-13));\r",
                  "// если позиция не существует, или выходит за диапазон\r",
                  "console.log(\"slice не существует: \" + fruits.slice(50));\r",
                  "console.log(\"slice выходит за диапазон: \" + fruits.slice(7, 50));\r",
                  "\r",
                  "// SUBSTRING\r",
                  "var fruits = \"apple, orange, mango\"\r",
                  "console.log(\"substring: \" + fruits.substring(7, 13));\r",
                  "console.log(\"substring: \" + fruits.substring(7));\r",
                  "console.log (\"substring не существует: \" + fruits.substring (50));\r",
                  "console.log (\"substringвыходит за диапазон: \" + fruits.substring (7,50));\r",
                  "\r",
                  "// SUBSTR () -  2-й параметр это  - ДЛИНА вырезаемой строки (количество символов)\r",
                  "var fruits = \"apple, orange, mango\"\r",
                  "console.log(\"substr +: \" + fruits.substr(7, 6));\r",
                  "console.log(\"substr -: \" + fruits.substr(-13, 6));\r",
                  "console.log(\"substr с 7: \" + fruits.substr(7));\r",
                  "console.log (\"substr не существует: \" + fruits.substr (50));\r",
                  "console.log (\"substr выходит за диапазон: \" + fruits.substr (7,50));\r",
                  "\r",
                  "\r",
                  "\r",
                  "// ЗАМЕНА КУСКА СТРОКИ\r",
                  "// REPLACE \r",
                  "// данный метод исходную строку не меняет. Измененную строку нужно сохранить в другую строку(переменную)\r",
                  "txt = \"Привет, Аноним\";\r",
                  "txt2 = txt.replace (\"Аноним\",\"Eka\")\r",
                  "console.log(\"replace: \" + txt2);\r",
                  "// если 2 совпадения, то замениться только 1-е сопадение\r",
                  "txt = \"Привет, Аноним! Аноним же?\";\r",
                  "txt2 = txt.replace (\"Аноним\",\"Eka\");\r",
                  "console.log(\"replace 2 совпадения: \" + txt2);\r",
                  "// метод регистрозависимый\r",
                  "txt = \"Привет, Аноним!\";\r",
                  "txt2 = txt.replace (\"АНОНИМ\",\"Eka\");\r",
                  "console.log(\"replace регистр: \" + txt2);\r",
                  "// регулярное выражение для обхода регистрозависимости\r",
                  "txt = \"Привет, Аноним!\";\r",
                  "txt2 = txt.replace (/АНОНИМ/i,\"Eka\");\r",
                  "console.log(\"replace обход регистра /i: \" + txt2);\r",
                  "// регулярное выражение для замены всех совпадений /g (global match)\r",
                  "txt = \"Привет, Аноним! Аноним же?\";\r",
                  "txt2 = txt.replace (/Аноним/g,\"Eka\");\r",
                  "console.log(\"replace /g : \" + txt2);\r",
                  "\r",
                  "\r",
                  "// ЗАМЕНА РЕГИСТРА\r",
                  "// toLowerCase и toUpperCase\r",
                  "var text1 = \"ДОБРОЕ УТРО, МИР!\";\r",
                  "var text2 = text1.toLowerCase();\r",
                  "console.log(text2);  \r",
                  "\r",
                  "var text3 = \"Доброе утро, мир!\";\r",
                  "var text4 = text3.toUpperCase();\r",
                  "console.log(text4);  \r",
                  "\r",
                  "\r",
                  "// 2 СТРОКИ В ОДНУ\r",
                  "// +\r",
                  "text1 = \"морской\";\r",
                  "text2 = \"бриз\";\r",
                  "text3 = text1 + \" \" + text2;\r",
                  "console.log(\"через плюс: \" + text3);  \r",
                  "// функция concat ()\r",
                  "text1 = \"морской\";\r",
                  "text2 = \"бриз\";\r",
                  "text3 = text1.concat(\" \", text2);\r",
                  "console.log(\"через concat: \" + text3); \r",
                  "// в concat можно записать сразу строки без параметров\r",
                  "console.log(\"морской \".concat(\"бриз\", \" без переменных\")); \r",
                  "*/\r",
                  "\r",
                  "\r",
                  "// УБРАТЬ ЛИШНИЕ ПРОБЛЕМЫ \r",
                  "//  TRIM\r",
                  "text1 = \"   морской бриз   \";\r",
                  "console.log(text1.trim()); \r",
                  "\r",
                  "\r",
                  "// ТЕСТИРОВАНИЕ ЭЛЕМЕНТОВ В СТРОКЕ ПО ОТДЕЛЬНОСТИ\r",
                  "// SPLIT\r",
                  "// консоль ответ 2 и 3 одинаковый\r",
                  "// консоль ответ 4 вернет сломанный массив\r",
                  "var fruits = \"apple, orange, mango\";\r",
                  "console.log (fruits.split (\",\"))\r",
                  "console.log (fruits.split (\", \"))\r",
                  "\r",
                  "var fruits = \"apple,orange,mango\";\r",
                  "console.log (fruits.split (\",\"))\r",
                  "console.log (fruits.split (\", \"))\r",
                  "\r",
                  "// комкад не сработает и приведет ответ к строке\r",
                  "console.log (\"через concat не сработает: \" + fruits.split (\", \"))\r",
                  "// без запятой не сработает\r",
                  "console.log (fruits.split (\"|\"))\r",
                  "\r",
                  "// разделит элемент по символам\r",
                  "cat = \"Котик\"\r",
                  "console.log (cat.split (\"\")) \r",
                  "\r",
                  "cat = \"Милый котик\"\r",
                  "console.log (cat.split (\"\")) \r",
                  "\r",
                  "\r",
                  "\r",
                  "\r",
                  "\r",
                  "\r",
                  "\r",
                  "\r",
                  "\r",
                  "\r",
                  "\r",
                  "\r",
                  "\r",
                  "\r",
                  "\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "4ed4afe9-e93d-4bfe-89dd-62baf822c537",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "api_key",
                "value": "ce3d045144724f2b9ad070180f3c7b82",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation createOrganization ($command: InputCreateOrganizationType!) {\ncreateOrganization (command: $command) {\nid\nname\naddresses {\nitems {\ncity\ncountryCode\ncountryName\nregionId\nregionName\npostalCode\nline1\nzip\n}\n}   \n}\n} ",
                "variables": "{\n\"command\": {\n\"name\":\"{{organization_name}}\",   \n\"addresses\": [{\n\"addressType\": 1,\n\"city\": \"111\",\n\"countryCode\": \"USA\",\n\"countryName\": \"United States of America\",\n\"regionId\": \"AL\",\n\"regionName\": \"Alabama\",\n\"postalCode\": \"111111\",\n\"line1\": \"Adress line 1\",\n\"zip\": \"222222\"\n}]     \n}\n}"
              },
              "options": {
                "graphql": {}
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "numbers",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3929c992-8617-4e55-a57c-6341d6bccb8a",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "ba12937c-7d1e-451c-80e8-1cfa4e06c590",
                "exec": [
                  "/*\r",
                  "// ПЕРЕВОД ЧИСЛА В СТРОКУ\r",
                  "x = 123;\r",
                  "y = \"123\";\r",
                  "z = x.toString ();\r",
                  "\r",
                  "console.log (x);\r",
                  "console.log (\"123 не равно '123'\" + Boolean (x === y));\r",
                  "console.log (\"'123' равно '123'\" + Boolean (z === y));\r",
                  "*/\r",
                  "\r",
                  "\r",
                  "// ПЕРЕВОД ПАРАМЕТРА В ЧИСЛО\r",
                  "// NUMBER - достает boolean\r",
                  "console.log (\"Number (true) return 1\" + \" = \" + Number (true));\r",
                  "console.log (\"Number (false) return 0\" + \" = \" + Number (false));\r",
                  "console.log (\"Number ('10') return 10\" + \" = \" + Number ('10'));\r",
                  "console.log (\"Number (' 10') return 10\" + \" = \" + Number (' 10'));\r",
                  "console.log (\"Number ('10 ') return 10\" + \" = \" + Number ('10 '));\r",
                  "console.log (\"Number (' 10 ') return 10\" + \" = \" + Number (' 10 '));\r",
                  "console.log (\"Number ('10.20') return 10.20\" + \" = \" + Number ('10.20'));\r",
                  "console.log (\"Number ('10,20') return Nan\" + \" = \" + Number ('10,20'));\r",
                  "console.log (\"Number ('10 20') return Nan\" + \" = \" + Number ('10 20'));\r",
                  "console.log (\"Number ('Name') return Nan\" + \" = \" + Number ('Name'));\r",
                  "\r",
                  "Number (new Date (\"20121-10-30\"))\r",
                  "\r",
                  "console.log (\"Number ('10') \" + parseInt ('10'));\r",
                  "console.log (\"Number (' 10 ') \" + parseInt (' 10 '));\r",
                  "console.log (\"Number ('10.33') \" + parseInt ('10.33'));\r",
                  "console.log (\"Number ('10,33') \" + parseInt ('10,33'));\r",
                  "console.log (\"Number ('10 20 30') \" + parseInt ('10 20 30'));\r",
                  "console.log (\"Number ('10 years') \" + parseInt ('10 years'));\r",
                  "console.log (\"Number ('years 10') \" + parseInt ('years 10'));\r",
                  "console.log (\"Number ('true') \" + parseInt ('true'));\r",
                  "console.log (\"Number ('false') \" + parseInt ('false'));\r",
                  "\r",
                  "// parseFloat достает любое число как простое , так и дробное\r",
                  "console.log (\"Number ('10') \" + parseFloat('10'));\r",
                  "console.log (\"Number ('10.33') \" + parseFloat ('10.33'));\r",
                  "console.log (\"Number ('10,33') \" + parseFloat ('10,33'));\r",
                  "console.log (\"Number ('10 20 30') \" + parseFloat ('10 20 30'));\r",
                  "console.log (\"Number ('10 years') \" + parseFloat ('10 years'));\r",
                  "console.log (\"Number ('years 10') \" + parseFloat ('years 10'));\r",
                  "console.log (\"Number ('true') \" + parseFloat ('true'));\r",
                  "console.log (\"Number ('false') \" + parseFloat ('false'));"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "2e9200d5-fd9d-4fbb-b5a9-8ab6de396a43",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "api_key",
                "value": "ce3d045144724f2b9ad070180f3c7b82",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation createOrganization ($command: InputCreateOrganizationType!) {\ncreateOrganization (command: $command) {\nid\nname\naddresses {\nitems {\ncity\ncountryCode\ncountryName\nregionId\nregionName\npostalCode\nline1\nzip\n}\n}   \n}\n} ",
                "variables": "{\n\"command\": {\n\"name\":\"{{organization_name}}\",   \n\"addresses\": [{\n\"addressType\": 1,\n\"city\": \"111\",\n\"countryCode\": \"USA\",\n\"countryName\": \"United States of America\",\n\"regionId\": \"AL\",\n\"regionName\": \"Alabama\",\n\"postalCode\": \"111111\",\n\"line1\": \"Adress line 1\",\n\"zip\": \"222222\"\n}]     \n}\n}"
              },
              "options": {
                "graphql": {}
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "arrays",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "1d486d60-5f27-4755-9980-a428a53d0c0f",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "5c1944f3-c6b2-4db7-913d-0525eb1fc714",
                "exec": [
                  "/*\r",
                  "// ПЕРЕВОД ЧИСЛА В СТРОКУ\r",
                  "// \r",
                  "// var items = new array равно var items = [] \r",
                  "// var nums = new Array (1,2,3) равно var num = [1,2,3] второе назвывается литеральный синтаксис, т.е. сокращенная запись\r",
                  "\r",
                  "// ДОБАВЛЕНИЕ ЭЛЕМЕНТА\r",
                  "// length\r",
                  "fruits = [\"apple\",\"pineapple\"]\r",
                  "console.log (\"Длина массива: \"+ fruits.length);\r",
                  "\r",
                  "orange = fruits [fruits.length - 1]\r",
                  "console.log (\"Последний элемент массива: \"+ orange);\r",
                  "\r",
                  "// push\r",
                  "fruits = [\"apple\",\"pineapple\"]\r",
                  "x = fruits.push (\"coconut\")\r",
                  "console.log (\"push: \"+ x);\r",
                  "console.log (fruits);\r",
                  "\r",
                  "// x[x.legnth]\r",
                  "fruits = [\"apple\",\"pineapple\"]\r",
                  "fruits [fruits.length] = \"kiwi\"\r",
                  "console.log (\"x[x.legnth]: \"+ fruits.length);\r",
                  "console.log (fruits);\r",
                  "\r",
                  "// unshift в начало\r",
                  "fruits = [\"apple\",\"pineapple\"]\r",
                  "x = fruits.unshift (\"mango\")\r",
                  "console.log (\"unshift: \"+ x);\r",
                  "console.log (fruits);\r",
                  "\r",
                  "// splice. 1 куда добавить новые элементы (позиция), 0 - сколько удалить\r",
                  "fruits = [\"apple\",\"pineapple\"]\r",
                  "fruits.splice (1,0,\"papaya\", \"orange\")   \r",
                  "console.log (\"добавим 2\"); \r",
                  "console.log (fruits);\r",
                  "\r",
                  "// splice как аналог push \r",
                  "fruits = [\"apple\",\"pineapple\"]\r",
                  "fruits.splice (fruits.length,0,\"papaya\", \"orange\")   \r",
                  "console.log (\"аналог push \"); \r",
                  "console.log (fruits);\r",
                  "\r",
                  "\r",
                  "// ЗАМЕНА ЭЛЕМЕНТА ИЗ МАССИВА \r",
                  "fruits = [\"apple\",\"pineapple\", \"orange\"]\r",
                  "fruits[0] = \"papaya\"  \r",
                  "console.log (\"замена элемента  \" + fruits);\r",
                  "console.log (fruits);\r",
                  "\r",
                  "\r",
                  "// УДАЛЕНИЕ ЭЛЕМЕНТА ИЗ МАССИВА\r",
                  "// pop - удаляет последний элемент массива\r",
                  "fruits = [\"apple\",\"pineapple\", \"orange\", \"coconut\"]\r",
                  "x = fruits.pop() \r",
                  "console.log (\"pop удаление элемента:  \" + x); \r",
                  "console.log (fruits);\r",
                  "\r",
                  "// shift - удаляет последний элемент массива\r",
                  "fruits = [\"apple\",\"pineapple\", \"orange\", \"coconut\"]\r",
                  "x = fruits.shift() \r",
                  "console.log (\"shift удаление элемента:  \" + x);\r",
                  "console.log (fruits);\r",
                  "\r",
                  "// delete - удаляет любой элемент массива, но заменяет на underfined удаленный элемент\r",
                  "fruits = [\"apple\",\"pineapple\", \"orange\", \"coconut\"]\r",
                  "delete fruits[0] \r",
                  "console.log (\"delete удаление элемента:  \" + delete fruits[0] );\r",
                  "console.log (fruits);\r",
                  "\r",
                  "// splice - удаляет любой элемент массива, но заменяет на underfined удаленный элемент.  0 с какой позиции удалять, 1 сколько элементов удалять\r",
                  "fruits = [\"apple\",\"pineapple\", \"orange\", \"coconut\"]\r",
                  "fruits.splice(0,1) \r",
                  "console.log (\"splice удаление элемента\" );\r",
                  "console.log (fruits);\r",
                  "\r",
                  "\r",
                  "// МАССИВ В СТРОКУ\r",
                  "// toString \r",
                  "fruits = [\"apple\",\"pineapple\", \"orange\", \"coconut\"]\r",
                  "y = fruits.toString() \r",
                  "console.log (\"toString массив в строку\"); \r",
                  "console.log (y);\r",
                  "\r",
                  "// join - можно любой разделитель\r",
                  "fruits = [\"apple\",\"pineapple\", \"orange\", \"coconut\"]\r",
                  "y = fruits.join(\"*\") \r",
                  "console.log (\"join массив в строку\"); \r",
                  "console.log (y);\r",
                  "\r",
                  "\r",
                  "// НЕСКОЛЬКО МАССИВОВ В ОДИН\r",
                  "// concat () \r",
                  "fruits1 = [\"apple\", \"orange\", \"kiwi\"]\r",
                  "fruits2 = [\"pineapple\", \"mango\", \"coconut\"]\r",
                  "fruits = fruits1.concat (fruits2)\r",
                  "console.log (\"concat добавить переменный\"); \r",
                  "console.log (fruits);\r",
                  "\r",
                  "fruits3 = [\"apple\", \"orange\", \"kiwi\"]\r",
                  "fruits = fruits3.concat ([\"pineapple\", \"mango\", \"coconut\"])\r",
                  "console.log (\"concat добавить массив\"); \r",
                  "console.log (fruits);\r",
                  "\r",
                  "fruits4 = [\"apple\", \"orange\", \"kiwi\"]\r",
                  "fruits = [\"apple\", \"orange\", \"kiwi\"].concat ([\"pineapple\", \"mango\", \"coconut\"])\r",
                  "console.log (\"concat добавить массив и массив\"); \r",
                  "console.log (fruits);\r",
                  "\r",
                  "\r",
                  "\r",
                  "// КОПИРОВАТЬ ЧАСТЬ МАССИВА\r",
                  "// slice () \r",
                  "fruits = [\"apple\", \"orange\", \"lemon\", \"pineapple\", \"mango\", \"coconut\"]\r",
                  "citrus = fruits.slice (1,3)\r",
                  "console.log (\"slice\"); \r",
                  "console.log (fruits); \r",
                  "console.log (citrus); \r",
                  "\r",
                  "// slice () скопируется с 1 и до конца\r",
                  "fruits = [\"apple\", \"orange\", \"lemon\", \"pineapple\", \"mango\", \"coconut\"]\r",
                  "citrus = fruits.slice (1)\r",
                  "console.log (\"slice с 1\"); \r",
                  "console.log (fruits);\r",
                  "console.log (citrus);  \r",
                  "*/\r",
                  "\r",
                  "\r",
                  "// СОРТИРОВКА МАССИВА\r",
                  "// sort () \r",
                  "fruits = [\"apple\", \"banana\", \"lemon\", \"mango\", \"coconut\"]\r",
                  "fruits.sort ()\r",
                  "console.log (fruits); \r",
                  "console.log (\"sort\"); \r",
                  "\r",
                  "// reverse () \r",
                  "fruits = [\"apple\", \"banana\", \"lemon\", \"mango\", \"coconut\"]\r",
                  "fruits.reverse ()\r",
                  "console.log (fruits); \r",
                  "console.log (\"reverse\"); \r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "79590f48-e25b-418b-a900-fb121e99abb2",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "api_key",
                "value": "ce3d045144724f2b9ad070180f3c7b82",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation createOrganization ($command: InputCreateOrganizationType!) {\ncreateOrganization (command: $command) {\nid\nname\naddresses {\nitems {\ncity\ncountryCode\ncountryName\nregionId\nregionName\npostalCode\nline1\nzip\n}\n}   \n}\n} ",
                "variables": "{\n\"command\": {\n\"name\":\"{{organization_name}}\",   \n\"addresses\": [{\n\"addressType\": 1,\n\"city\": \"111\",\n\"countryCode\": \"USA\",\n\"countryName\": \"United States of America\",\n\"regionId\": \"AL\",\n\"regionName\": \"Alabama\",\n\"postalCode\": \"111111\",\n\"line1\": \"Adress line 1\",\n\"zip\": \"222222\"\n}]     \n}\n}"
              },
              "options": {
                "graphql": {}
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "dates",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6a2edb69-100a-4760-9bc3-bb3a0cf31093",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a6560168-225c-40f4-b501-f3a074e6095d",
                "exec": [
                  "// ПРОВЕРКА ДАТЫ. месяц на чинаетс 0 до 11\r",
                  "// \r",
                  "var jsonData = pm.response.json();\r",
                  "\r",
                  "data_result = new Date (2021,10,30)\r",
                  "// сначала дату нужно привести к дате если тест падает\r",
                  "date_for_test = new Date ((jsonData.datafromtheresponse))\r",
                  "pm.test(\"date test\", function () {\r",
                  "    pm.expect(date_for_test.getFullYear).to.eql(2021);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "// СРАВНЕНИЕ ДАТЫ БЕЗ ЧАСОВ И МИНУТ. так сработает только EQL. \r",
                  "// создали 2 переменный на даты что и с чем сравнивать\r",
                  "data_result = new Date (2021,10,30)\r",
                  "date_for_test = new Date ((jsonData.datafromtheresponse))\r",
                  "// привели обе даты к строке\r",
                  "data_result1 = data_result.toDateString();\r",
                  "date_for_test2 = date_for_test.toDateString();\r",
                  "pm.test(\"date test\", function () {\r",
                  "    pm.expect(data_result1).to.eql(date_for_test2);\r",
                  "});\r",
                  "\r",
                  "console.log (\"data_result: с часами и минутами\" + data_result);\r",
                  "condole.log (\"data_result.toDateString: без часами и минутами\" + data_result1);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "a2b24e6a-3bbf-4d4d-909d-560e467a520e",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "api_key",
                "value": "ce3d045144724f2b9ad070180f3c7b82",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation createOrganization ($command: InputCreateOrganizationType!) {\ncreateOrganization (command: $command) {\nid\nname\naddresses {\nitems {\ncity\ncountryCode\ncountryName\nregionId\nregionName\npostalCode\nline1\nzip\n}\n}   \n}\n} ",
                "variables": "{\n\"command\": {\n\"name\":\"{{organization_name}}\",   \n\"addresses\": [{\n\"addressType\": 1,\n\"city\": \"111\",\n\"countryCode\": \"USA\",\n\"countryName\": \"United States of America\",\n\"regionId\": \"AL\",\n\"regionName\": \"Alabama\",\n\"postalCode\": \"111111\",\n\"line1\": \"Adress line 1\",\n\"zip\": \"222222\"\n}]     \n}\n}"
              },
              "options": {
                "graphql": {}
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "math",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "f1c53f2f-2c4e-40ed-bbd2-a73f03b1a8e0",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "940ec04a-1390-4d1c-8625-50b9176ef0df",
                "exec": [
                  "// МАТЕМАТИЧЕСКАЯ ФУНКЦИЯ\r",
                  "// \r",
                  "x = Math.random ();\r",
                  "console.log (\"math.random: \" + x);\r",
                  "\r",
                  "y = Math.random () * 11;\r",
                  "console.log (\"math.random * 11: \" + y);\r",
                  "\r",
                  "z = Math.floor (y);\r",
                  "console.log (\"math.floor : \" + z);\r",
                  "\r",
                  "console.log (\"math.min * 11: \" + Math.min (0, 150, 30, 20, -8, -200));\r",
                  "console.log (\"math.max * 11: \" + Math.max (0, 150, 30, 20, -8, -200));  "
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "025e6258-2d9c-4a35-8e8d-5a937cb3054e",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "api_key",
                "value": "ce3d045144724f2b9ad070180f3c7b82",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation createOrganization ($command: InputCreateOrganizationType!) {\ncreateOrganization (command: $command) {\nid\nname\naddresses {\nitems {\ncity\ncountryCode\ncountryName\nregionId\nregionName\npostalCode\nline1\nzip\n}\n}   \n}\n} ",
                "variables": "{\n\"command\": {\n\"name\":\"{{organization_name}}\",   \n\"addresses\": [{\n\"addressType\": 1,\n\"city\": \"111\",\n\"countryCode\": \"USA\",\n\"countryName\": \"United States of America\",\n\"regionId\": \"AL\",\n\"regionName\": \"Alabama\",\n\"postalCode\": \"111111\",\n\"line1\": \"Adress line 1\",\n\"zip\": \"222222\"\n}]     \n}\n}"
              },
              "options": {
                "graphql": {}
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "let var const",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "525b8005-f832-4d8c-a04c-0e02baf4bd02",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "6e735422-bd02-4ec5-a8a8-e78154e1c0b1",
                "exec": [
                  "pm.test(\"Your test name\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.value).to.eql(100);\r",
                  "});\r",
                  "// в даннос случае запрос к переменной jsonData через объявление переменной var - значит, что переменная видна только внутри данной функции {} поэтому вынесенный за эти скобки console.log выдает ошибку There was an error in evaluating the test script:  ReferenceError: jsonData is not defined\r",
                  "console.log(jsonData);\r",
                  "\r",
                  "\r",
                  "//с let результат тот же, так как let внутри функции {}, и в данном случае другой функции внутри нет. \r",
                  "pm.test(\"Your test name\", function () {\r",
                  "    let jsonData = pm.response.json();\r",
                  "    console.log(jsonData);\r",
                  "    pm.expect(jsonData.value).to.eql(100);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "// хорошей практикой используется либо var/ либо let, если внутри небольшого теста нет дополнительных функций, уровней вложенности или {} \r",
                  "// Eсли необходимо написать несколько тестов на разные ключи, то имеет смысл вынести обьявление переменной const jsonData = pm.response.json(); за скобки/ То есть выше теста\r",
                  "    const jsonData = pm.response.json();\r",
                  "pm.test(\"test country\", function () {\r",
                  "    console.log(jsonData);\r",
                  "    pm.expect(jsonData.data.createOrganization.name).to.eql(\"Organization_noneed\");\r",
                  "});*/\r",
                  "\r",
                  "\r",
                  "//Если путь до переменной длинный, то имеет смысл создать сокращенный.Обе записи ниже одинаковые.\r",
                  "pm.test(\"test name\", function () {\r",
                  "    const jsonData = pm.response.json();\r",
                  "    OrganizationName = jsonData.data.createOrganization.name\r",
                  "    console.log(OrganizationName);\r",
                  "    pm.expect(OrganizationName).to.eql(\"Organization_noneed\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"test country\", function () {\r",
                  "    const jsonData = pm.response.json();\r",
                  "    console.log(jsonData.data.createOrganization.name);\r",
                  "    pm.expect(jsonData.data.createOrganization.name).to.eql(\"Organization_noneed\");\r",
                  "});\r",
                  "\r",
                  "\r",
                  "//value - это значение, которые приходит в теле ответа, оно юбыть быть заменено как в самом объекте вариант1 , так и вынесено в переменную вариант2\r",
                  "pm.test(\"Your test name\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.value).to.eql(100);\r",
                  "});\r",
                  "\r",
                  "//вариант 1, в консоль выведется весь объект\r",
                  "pm.test(\"Organization was created\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    console.log(pm.response.json());\r",
                  "    pm.expect(jsonData.data.createOrganization.name).to.eql(\"Organization_noneed\");\r",
                  "}); \r",
                  "\r",
                  "//вариант 2, объявление переменной JsonData вынесена за скобки: 1. Потому что мы ориентируется не на тест, а чтобы достать информацию 2.Если необходимо написать множество тестов и постоянно  обращаться к данному элементу JsonData.\r",
                  "var jsonData = pm.response.json();\r",
                  "\r",
                  "OrganizationName = jsonData.data.createOrganization.name\r",
                  "console.log (OrganizationName)\r",
                  "\r",
                  "pm.test(\"Organization was created\", function () {\r",
                  "    pm.expect(OrganizationName).to.eql(\"Organization_noneed\");\r",
                  "});\r",
                  "*/\r",
                  "\r",
                  "//вывод нескольких свойств объекта\r",
                  "var jsonData = pm.response.json();\r",
                  "console.log (jsonData)\r",
                  "\r",
                  "OrganizationName = jsonData.data.createOrganization.name\r",
                  "console.log (OrganizationName)\r",
                  "\r",
                  "OrganizationCountry = jsonData.data.createOrganization.addresses.items[0].countryName\r",
                  "console.log (OrganizationCountry)\r",
                  "\r",
                  "pm.test(\"Organization was created\", function () {\r",
                  "    pm.expect(OrganizationName).to.eql(\"Organization_noneed\");\r",
                  "});\r",
                  "\r",
                  "\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "87723d37-5042-455b-9347-d73d1ad3ee02",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "api_key",
                "value": "ce3d045144724f2b9ad070180f3c7b82",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation createOrganization ($command: InputCreateOrganizationType!) {\ncreateOrganization (command: $command) {\nid\nname\naddresses {\nitems {\ncity\ncountryCode\ncountryName\nregionId\nregionName\npostalCode\nline1\nzip\n}\n}   \n}\n} ",
                "variables": "{\n\"command\": {\n\"name\":\"{{organization_name}}\",   \n\"addresses\": [{\n\"addressType\": 1,\n\"city\": \"111\",\n\"countryCode\": \"USA\",\n\"countryName\": \"United States of America\",\n\"regionId\": \"AL\",\n\"regionName\": \"Alabama\",\n\"postalCode\": \"111111\",\n\"line1\": \"Adress line 1\",\n\"zip\": \"222222\"\n}]     \n}\n}"
              },
              "options": {
                "graphql": {}
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "Object.keys",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7161a398-b0fa-40a5-8811-43b592193a50",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "b2c23326-1059-4a02-9937-3aa685482d33",
                "exec": [
                  "var jsonData = pm.response.json();\r",
                  "console.log (jsonData)\r",
                  "console.log (Object.keys(jsonData))\r",
                  "pm.test(\"Your test name\", function () {\r",
                  "    pm.expect(pm.response.json().data.createOrganization.name).to.eql(\"Organization_noneed\");\r",
                  "});\r",
                  "\r",
                  "\r",
                  "var jsonData = pm.response.json();\r",
                  "//pm.response. возвращает ответ, но по факту корректное написание переменных может  отличаться. object.keys возвращает все ключи объекта и все корректные их написания. Header приходит в ответе, но по факту правильное написание этого ключа - Headers. \r",
                  "// тут получает корректное написание объектов\r",
                  "console.log (Object.keys(pm.response)); \r",
                  "//выясняем какие ключи у объекта Headers \r",
                  "console.log (Object.keys(pm.response.headers)); - \r",
                  "//выводим ключи для  Members. и его ключ в массиве 1: Content-Type.\r",
                  "console.log (pm.response.headers.members[1].key)\r",
                  "//либо виводим ключи для Type в headers. \r",
                  "console.log (pm.response.headers.Type)\r",
                  "\r",
                  "pm.test(\"Your test name\", function () {\r",
                  "    pm.expect(pm.response.json().data.createOrganization.name).to.eql(\"Organization_noneed\");\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "f53f37aa-3b00-4248-9e99-1fc67afefba8",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "api_key",
                "value": "ce3d045144724f2b9ad070180f3c7b82",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation createOrganization ($command: InputCreateOrganizationType!) {\ncreateOrganization (command: $command) {\nid\nname\naddresses {\nitems {\ncity\ncountryCode\ncountryName\nregionId\nregionName\npostalCode\nline1\nzip\n}\n}   \n}\n} ",
                "variables": "{\n\"command\": {\n\"name\":\"{{organization_name}}\",   \n\"addresses\": [{\n\"addressType\": 1,\n\"city\": \"111\",\n\"countryCode\": \"USA\",\n\"countryName\": \"United States of America\",\n\"regionId\": \"AL\",\n\"regionName\": \"Alabama\",\n\"postalCode\": \"111111\",\n\"line1\": \"Adress line 1\",\n\"zip\": \"222222\"\n}]     \n}\n}"
              },
              "options": {
                "graphql": {}
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "Headers",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "8a8d3909-c567-4cce-a5bb-424133fec319",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "b38d3660-02a6-4fdf-b56e-c380ede8b045",
                "exec": [
                  "pm.test(\"Content-Type is present\", function () {\r",
                  "    pm.response.to.have.header(\"Content-Type\");\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Content-Type and value\", function () {\r",
                  "    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Request-Context and value\", function () {\r",
                  "    pm.response.to.have.header(\"Request-Context\", \"appId=cid-v1:5be03902-03af-4a44-9628-65c0a7d5107c\");\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Content-Type and value часть значения\", function () {\r",
                  "    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"include по фразе\", function () {\r",
                  "    pm.expect(pm.response.headers.members[1].value).to.include(\"json\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"include для заголовков через get\", function () {\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"json\");\r",
                  "});\r",
                  "\r",
                  "\r",
                  "console.log (pm.response.headers.contentSize())\r",
                  "//возвращает 8 заголовков\r",
                  "console.log (pm.response.headers.count())\r",
                  "\r",
                  "pm.test(\"сколько заголовков вернулось\", function () {\r",
                  "    pm.expect(pm.response.headers.count()).to.eql(8);\r",
                  "});\r",
                  "\r",
                  "console.log (pm.response.headers.get(\"Content-Type\"))\r",
                  "\r",
                  "\r",
                  "//has - возрващает значение true или false. поэтому и проверку проводить через to.be.true или to.be.false\r",
                  "console.log (pm.response.headers.has(\"Content-Type\"))\r",
                  "pm.test(\"Content-Type через has\", function () {\r",
                  "    pm.expect(pm.response.headers.has(\"Content-Type\")).to.be.true;\r",
                  "});\r",
                  "pm.test(\"Content-Type через has\", function () {\r",
                  "    pm.expect(pm.response.headers.has(\"Content-Type\")).to.be.false;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Content-Type через has вместе с value\", function () {\r",
                  "    pm.expect(pm.response.headers.has(\"Content-Type\", \"application/json\")).to.be.true;\r",
                  "});\r",
                  "\r",
                  "\r",
                  "// тут узнали, что Content-Type идет под номером 1\r",
                  "console.log (pm.response.headers.idx(1))\r",
                  "pm.test(\"Content-Type через idx\", function () {\r",
                  "    pm.expect(pm.response.headers.idx(1).key).to.eql(\"Content-Type\");\r",
                  "});\r",
                  "// тут сравнили, что Content-Type точно идет под номером 1\r",
                  "console.log (pm.response.headers.indexOf(\"Content-Type\"));\r",
                  "pm.test(\"Content-Type через indexOf идет под номером 1\", function () {\r",
                  "    pm.expect(pm.response.headers.indexOf(\"Content-Type\")).to.eql(1);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "254da147-27a2-44d9-b719-808fa664771f",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "api_key",
                "value": "ce3d045144724f2b9ad070180f3c7b82",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation createOrganization ($command: InputCreateOrganizationType!) {\ncreateOrganization (command: $command) {\nid\nname\naddresses {\nitems {\ncity\ncountryCode\ncountryName\nregionId\nregionName\npostalCode\nline1\nzip\n}\n}   \n}\n} ",
                "variables": "{\n\"command\": {\n\"name\":\"{{organization_name}}\",   \n\"addresses\": [{\n\"addressType\": 1,\n\"city\": \"111\",\n\"countryCode\": \"USA\",\n\"countryName\": \"United States of America\",\n\"regionId\": \"AL\",\n\"regionName\": \"Alabama\",\n\"postalCode\": \"111111\",\n\"line1\": \"Adress line 1\",\n\"zip\": \"222222\"\n}]     \n}\n}"
              },
              "options": {
                "graphql": {}
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "Cookies",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "57fdf94f-7a5d-4cb9-9a94-c7c65830d459",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "67ddfc2b-4f52-4fd9-a2fc-fe6dcc6a163b",
                "exec": [
                  "//основные тесты\r",
                  "console.log(cookies.count())\r",
                  "pm.test(\"count\", function () {\r",
                  "    pm.expect(pm.cookies.count()).to.eql(1);\r",
                  "});\r",
                  "\r",
                  "console.log(cookies.get(\"value\"))\r",
                  "pm.test(\"get\", function () {\r",
                  "    pm.expect(pm.cookies.get()).to.eql(\"value\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"get+ value partly\", function () {\r",
                  "    pm.expect(pm.cookies.get()).to.include(\"value partly\");\r",
                  "});\r",
                  "\r",
                  "//остальные тесты\r",
                  "console.log(cookies.has(\"Name\"))\r",
                  "pm.test(\"boolean has\", function () {\r",
                  "    pm.expect(pm.cookies.has(\"Name\")).to.be.true;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"boolean has + value\", function () {\r",
                  "    pm.expect(pm.cookies.has(\"Name\", \"value\")).to.be.true;\r",
                  "});\r",
                  "\r",
                  " \r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "8320b967-33e4-454b-afaa-61080c786864",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "api_key",
                "value": "ce3d045144724f2b9ad070180f3c7b82",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation createOrganization ($command: InputCreateOrganizationType!) {\ncreateOrganization (command: $command) {\nid\nname\naddresses {\nitems {\ncity\ncountryCode\ncountryName\nregionId\nregionName\npostalCode\nline1\nzip\n}\n}   \n}\n} ",
                "variables": "{\n\"command\": {\n\"name\":\"{{organization_name}}\",   \n\"addresses\": [{\n\"addressType\": 1,\n\"city\": \"111\",\n\"countryCode\": \"USA\",\n\"countryName\": \"United States of America\",\n\"regionId\": \"AL\",\n\"regionName\": \"Alabama\",\n\"postalCode\": \"111111\",\n\"line1\": \"Adress line 1\",\n\"zip\": \"222222\"\n}]     \n}\n}"
              },
              "options": {
                "graphql": {}
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "Запрос к объекту",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "37cae500-f495-487f-8a19-96d079424314",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "da296e90-b769-4134-8594-7616b8d37953",
                "exec": [
                  "\r",
                  "//обращение к объекту - точечная запись, обращение к массиву - []. Обе записи одинаковые\r",
                  "console.log(jsonData.data);\r",
                  "console.log(jsonData[\"data\"]);\r",
                  "\r",
                  "//обращение к свойству объекта - id.. Обе записи одинаковые \r",
                  "console.log(jsonData.data.createOrganization.id);\r",
                  "console.log(jsonData[\"data\"][\"createOrganization\"][\"id\"])\r",
                  "\r",
                  "//обращение к свойству объекта внутри массива из дерева элементов - city\r",
                  "console.log(jsonData.data.createOrganization.addresses.items[0].city);\r",
                  "console.log(jsonData.data.createOrganization.addresses.items[0].countryName);*/\r",
                  "\r",
                  "\r",
                  "var jsonData = pm.response.json();\r",
                  "OrganizationCountry = jsonData.data.createOrganization.addresses.items[0].countryName\r",
                  "console.log (OrganizationCountry)\r",
                  "pm.test(\"Organization Country\", function () {\r",
                  "    pm.expect(OrganizationCountry).to.eql(\"United States of America\");\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "630a0a8c-14d7-4910-823a-b1de2a933969",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "api_key",
                "value": "ce3d045144724f2b9ad070180f3c7b82",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation createOrganization ($command: InputCreateOrganizationType!) {\ncreateOrganization (command: $command) {\nid\nname\naddresses {\nitems {\ncity\ncountryCode\ncountryName\nregionId\nregionName\npostalCode\nline1\nzip\n}\n}   \n}\n} ",
                "variables": "{\n\"command\": {\n\"name\":\"{{organization_name}}\",   \n\"addresses\": [{\n\"addressType\": 1,\n\"city\": \"111\",\n\"countryCode\": \"USA\",\n\"countryName\": \"United States of America\",\n\"regionId\": \"AL\",\n\"regionName\": \"Alabama\",\n\"postalCode\": \"111111\",\n\"line1\": \"Adress line 1\",\n\"zip\": \"222222\"\n}]     \n}\n}"
              },
              "options": {
                "graphql": {}
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "json schema",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "760173e8-48df-46b6-aa13-5387ebc83bea",
                "exec": [
                  "const schema = {\r",
                  " \"items\": {\r",
                  " \"type\": \"boolean\"\r",
                  " }\r",
                  "};\r",
                  "const data1 = [true, false];\r",
                  "const data2 = [true, 123];\r",
                  "\r",
                  "pm.test('Schema is valid 1', function() {\r",
                  "  pm.expect(tv4.validate(data1, schema)).to.be.true;\r",
                  "});\r",
                  "\r",
                  "//упадет. так как тип данных не полностью boolean\r",
                  "pm.test('Schema is valid 2', function() {\r",
                  "  pm.expect(tv4.validate(data2, schema)).to.be.true;\r",
                  "});\r",
                  "\r",
                  "// ajv\r",
                  "const schema = {\r",
                  "  \"properties\": {\r",
                  "    \"alpha\": {\r",
                  "      \"type\": \"boolean\"\r",
                  "    }\r",
                  "  }\r",
                  "};\r",
                  "pm.test('Schema is valid', function() {\r",
                  "  pm.response.to.have.jsonSchema(schema);\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "5e1cbc69-38a4-4d58-b9b2-8562660476e6",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": "http://httpbin.org/uuid"
          },
          "response": []
        },
        {
          "name": "html",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a8945d6b-6eba-4d59-89c0-d5590c76e461",
                "exec": [
                  " // проверка как простой текст\r",
                  "pm.test(\"Body matches string\", function () {\r",
                  "    pm.expect(pm.response.text()).to.include(\"JSONPlaceholder - Free Fake REST API\");\r",
                  "});\r",
                  "\r",
                  "// проверка через регулярные выражения\r",
                  "pm.test(\"через регулярные выражения\", function () {\r",
                  "    pm.expect(pm.response.text()).to.match(/.*<title>JSONPlaceholder - Free Fake REST API<\\/title>.*/);\r",
                  "});\r",
                  "\r",
                  "// проверка через cheerio.js\r",
                  "const $ = cheerio.load (pm.response.text ());\r",
                  "pm.test(\"через cheerio.js\", function () {\r",
                  "    pm.expect($('title').text()).to.eql(\"JSONPlaceholder - Free Fake REST API\");\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "29889a61-90ad-44e4-bdaf-39575cc97bd9",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "26302e29-38ae-4410-8af0-83098fc0c850",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "",
                "variables": ""
              },
              "options": {
                "graphql": {}
              }
            },
            "url": "https://jsonplaceholder.typicode.com"
          },
          "response": []
        },
        {
          "name": "jQuery Selectors",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "16602de7-f233-4bfd-b722-e74942f43677",
                "exec": [
                  "const $ = cheerio.load ('<p> Абзац 1 </p>\\\r",
                  "<p class=\"test\"> Абзац 2 </p>\\\r",
                  "<p id=\"test\"> Абзац 3 </p>\\\r",
                  "<p style=\"text-aligh:right\"> Абзац 4 </p>\\\r",
                  "<p class=\"test\" color=\"red\"> Абзац 5 </p>\\\r",
                  "<b>\\\r",
                  "<c><p> вложенный абзац </p></с>\\\r",
                  "</b>\\\r",
                  "<a class=\"test\"> Ссылка 1 </a>\\\r",
                  "<a id=\"test\">Ссылка 2 </a>\\\r",
                  "<a style=\"text-aligh:right\"> Ссылка 3 </a>\\\r",
                  "<a style=\"text-aligh:left\"> Ссылка 4 </a>');\r",
                  "\r",
                  "console.log (\"Селектор по названию элемента:\" + $(\"p\").text());\r",
                  "\r",
                  "console.log (\"Селектор по id элемента:\" + $(\"#test\").text());\r",
                  "console.log (\"Селектор по id конкретного элемента:\" + $(\"p#test\").text());\r",
                  "\r",
                  "console.log (\"Селектор по class элемента:\" + $(\".test\").text());\r",
                  "console.log (\"Селектор по class конкретного элемента:\" + $(\"a.test\").text());\r",
                  "\r",
                  "console.log (\"Селектор по наличию атрибута:\" + $(\"[style]\").text());\r",
                  "console.log (\"Селектор по наличию атрибута с конкретным значением:\" + $('[style=\"text-aligh:right\"]').text());\r",
                  "console.log (\"Нет атрибута с конкретным значением:\" + $('[style!=\"text-aligh:right\"]').text());\r",
                  "console.log (\"Есть атрибут <p> с конкретным значением:\" + $('p[style=\"text-aligh:right\"]').text());\r",
                  "\r",
                  "console.log (\"Несколько атрибутов:\" + $('p[class=\"test\"][color=\"red\"]').text());\r",
                  "\r",
                  "console.log (\"Вернет все\" + $('*').text());"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "35dfc16d-d487-45be-b8fa-dad668e7a7de",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "64a59699-0f4e-43f8-9889-736e3c6577d2",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "",
                "variables": ""
              },
              "options": {
                "graphql": {}
              }
            },
            "url": "https://jsonplaceholder.typicode.com"
          },
          "response": []
        },
        {
          "name": "jQuery selector 2",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "29166f72-4553-4b04-86f5-b0ed55990a49",
                "exec": [
                  "const $ = cheerio.load (pm.response.text());\r",
                  "\r",
                  "console.log (\"поиск 1 элемента:\" + $(\"a[href='https://github.com/typicode/xv']\").text());\r",
                  "console.log (\"поиск 2х\" + $(\"a[href='https://my-json-server.typicode.com'][class='no-underline']\").text());\r",
                  "\r",
                  " \r",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "834b4366-6559-454f-8a86-849f438ed9e8",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "f42fa6e6-8ea7-4c9c-b09c-e422e4647cb7",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "",
                "variables": ""
              },
              "options": {
                "graphql": {}
              }
            },
            "url": "https://jsonplaceholder.typicode.com"
          },
          "response": []
        },
        {
          "name": "jQuery getContent",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5c284357-f612-4856-bc23-72e6564059dc",
                "exec": [
                  "const $ = cheerio.load ('<p><a> number 1 </a></p>\\\r",
                  "<p> number 2 </p>\\\r",
                  "<p> number 3 </p>\\\r",
                  "');\r",
                  "\r",
                  "console.log (\"Селектор по названию элемента:\" + $(\"p\").text());\r",
                  "console.log (\"Селектор по названию элемента:\" + $(\"p\").html);\r",
                  "\r",
                  "pm.test(\"Body matches string\", function () {\r",
                  "    pm.expect($(\"p\")).to.eql(\"<a> number 1 </a>\");\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "e5973e7a-b1c2-43cd-ac4b-3d014aa70872",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "0347252f-eb73-4cd1-932e-a998c45292f0",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "",
                "variables": ""
              },
              "options": {
                "graphql": {}
              }
            },
            "url": "https://jsonplaceholder.typicode.com"
          },
          "response": []
        },
        {
          "name": "jQuery getAttributes",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "87cc35ca-32fb-4771-b1b7-d89e5fac263f",
                "exec": [
                  "const $ = cheerio.load ('<p><a> number 1 </a></p>\\\r",
                  "<p attr1=\"val1\" attr2=\"val2\"> number 2 </p>\\\r",
                  "<p attr3=\"val3\"> number 3 </p>\\\r",
                  "');\r",
                  "\r",
                  "\r",
                  "\r",
                  "console.log (\"Селектор по названию элемента:\" + $(\"p\").attr());\r",
                  "\r",
                  "\r",
                  "$(\"p\").each (function(){\r",
                  "    console.log($(this).attr());\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "149b9b8a-bfa0-43a1-87d5-130ec3982ed7",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "7dc5b9c1-422b-4645-8089-ebe3af4d1099",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "",
                "variables": ""
              },
              "options": {
                "graphql": {}
              }
            },
            "url": "https://jsonplaceholder.typicode.com"
          },
          "response": []
        },
        {
          "name": "AttributesSelectors",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "080e358e-096a-4266-ab7f-e621980dcfe0",
                "exec": [
                  "const $ = cheerio.load ('<p lang=\"en\"> number 1 </p>\\\r",
                  "<p lang=\"en UK\"> number 2 </p>\\\r",
                  "<p lang=\"en-UK\"> number 3 </p>\\\r",
                  "<p lang=\"english\"> number 4 </p>\\\r",
                  "<p lang=\"men\"> number 5 </p>\\\r",
                  "');\r",
                  "\r",
                  "// SCC  селекторы\r",
                  "console.log (\"ВСЕ элементы:\" + ($(\"[lang]\").text()));\r",
                  "console.log (\"с таким значением: \" + ($(\"[lang='en']\").text()));\r",
                  "console.log (\"с таким значением из всех:\" + ($(\"[lang~='en']\").text()));\r",
                  "console.log (\"с таким значением а после м.ю. любой символ:\" + ($(\"[lang|='en']\").text()));\r",
                  "// jquery селекторы\r",
                  "console.log (\"с таким значением, вкл. такое значение :\" + ($(\"[lang*='en']\").text()));\r",
                  "console.log (\"заканчивается на такое значение :\" + ($(\"[lang$='en']\").text()));\r",
                  "console.log (\"начинается на такое значение:\" + ($(\"[lang^='en']\").text()));\r",
                  "console.log (\"не равно значению :\" + ($(\"[lang!='en']\").text()));\r",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "39ed1295-2cd9-4cb2-b458-d4263ec03292",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "08ab34a8-fec3-4fbf-8064-a525e580c93f",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "",
                "variables": ""
              },
              "options": {
                "graphql": {}
              }
            },
            "url": "https://jsonplaceholder.typicode.com"
          },
          "response": []
        }
      ],
      "_postman_id": "015bb0ba-1422-4d3d-bcdf-7e023b5f5dea"
    },
    {
      "name": "200",
      "item": [
        {
          "name": "200 Chai.js",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "61fee9fa-3f8e-4e2a-a831-cd51d62644e8",
                "exec": [
                  "console.log(pm.response.code);\r",
                  "\r",
                  "// МОЖНО: статус код \r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// МОЖНО: статус ok\r",
                  "pm.test(\"Status code name has string\", function () {\r",
                  "    pm.response.to.have.status(\"OK\");\r",
                  "});\r",
                  "\r",
                  "//МОЖНО: status code\r",
                  "pm.test(\"Test through the:status code - info 1xx\", function () {\r",
                  "    pm.response.to.be.info;\r",
                  "});\r",
                  "pm.test(\"Test through the:status code - success 2xx\", function () {\r",
                  "    pm.response.to.be.success;\r",
                  "});\r",
                  "\r",
                  "// МОЖНО РЕКОМЕНДУЕТСЯ: eql. В первую очередь рекомендуется eql, затем другие функции и только потом ok.\r",
                  "// статус код число равно число - оба теста ниже - одно и то же, без functions\r",
                  "pm.test(\"Test through the: to.eql\", () => {\r",
                  "    pm.expect(pm.response.code).to.eql(200)\r",
                  "});\r",
                  "pm.test(\"Test through the: to.eql\", function () {\r",
                  "    pm.expect(pm.response.code).to.eql(200);\r",
                  "});\r",
                  "\r",
                  "//МОЖНО: \r",
                  "pm.test(\"Test through the: Status code is not 400\", function () {\r",
                  "    pm.response.to.not.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Test through the:equal\", () => {\r",
                  "    pm.expect(pm.response.code).to.equal(400)\r",
                  "});\r",
                  "pm.test(\"Test through the:deep equal\", () => {\r",
                  "    pm.expect(pm.response.code).to.deep.equal(400)\r",
                  "});\r",
                  "// РАЗНИЦА: equal and deep equal: не точное равенство, сравниванием со строкой 200, а не числом.\r",
                  "pm.test(\"Test through the: equal\", () => {\r",
                  "    pm.expect(pm.response.code).to.equal(\"200\")\r",
                  "});\r",
                  "pm.test(\"Test through the:deep equal\", () => {\r",
                  "    pm.expect(pm.response.code).to.deep.equal(\"200\")\r",
                  "});\r",
                  "\r",
                  "//МОЖНО: to.be.a number. 200 это число\r",
                  "pm.test(\"Test through the: to.be.a number\", () => {\r",
                  "    pm.expect(pm.response.code).to.be.a(\"number\")\r",
                  "});\r",
                  "\r",
                  "// МОЖНО: to.be.true\r",
                  "pm.test(\"Test through the: to.be.a true\", () => {\r",
                  "    pm.expect(pm.response.code===200).to.be.true\r",
                  "});\r",
                  "// МОЖНО: to.be.false\r",
                  "pm.test(\"Test through the: to.be.false\", () => {\r",
                  "    pm.expect(pm.response.code===201).to.be.false\r",
                  "});\r",
                  "\r",
                  "// МОЖНО: to.match / регулярные выражения/ число 2 совпадает частично с числом 200\r",
                  "pm.test(\"Test through the: to.match\", () => {\r",
                  "    pm.expect(pm.response.code).to.match(/^2/);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "// МОЖНО, но НЕ рекомендуется: to.be.ok\r",
                  "pm.test(\"Test through the: to.be.ok\", () => {\r",
                  "    pm.expect(pm.response.code===200).to.be.ok;\r",
                  "});\r",
                  "// МОЖНО, но НЕ рекомендуется: to.not.be.ok\r",
                  "pm.test(\"Test through the: to.not.be.ok\", () => {\r",
                  "    pm.expect(pm.response.code===200).to.not.be.ok;\r",
                  "});\r",
                  "//МОЖНО, но НЕ рекомендуется: to.be.ok, рекомендуется проверять через to.be.eql\r",
                  "pm.test(\"Test through the:status code - ok\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "\r",
                  "\r",
                  "// МОЖНО, но НЕ рекомендуется: Response time\r",
                  "pm.test(\"Response time is less than 200ms\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.below(201);\r",
                  "});\r",
                  "pm.test(\"Response time is more than 200ms\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.above(100);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "// МОЖНО, но НЕ рекомендуется: to.not.be.null\r",
                  "pm.test(\"Test through the: to.not.be.null\", () => {\r",
                  "    pm.expect(pm.response.code).to.not.be.null;\r",
                  "});\r",
                  "pm.test(\"Test through the: to.not.be.null\", () => {\r",
                  "    pm.expect(pm.response.code).to.be.null;\r",
                  "});\r",
                  "\r",
                  "// МОЖНО, но НЕ рекомендуется: to.be.undefined\r",
                  "pm.test(\"Test through the: to.be.undefined\", () => {\r",
                  "    pm.expect(pm.response.code).to.be.undefined;\r",
                  "});\r",
                  "pm.test(\"Test through the: to.not.be.undefined\", () => {\r",
                  "    pm.expect(pm.response.code).to.not.be.undefined;\r",
                  "});\r",
                  "\r",
                  "\r",
                  "// МОЖНО, но НЕ рекомендуется: to.be.NaN\r",
                  "pm.test(\"Test through the: to.be.NaN\", () => {\r",
                  "    pm.expect(pm.response.code).to.be.NaN;\r",
                  "});\r",
                  "pm.test(\"Test through the: to.not.be.NaN\", () => {\r",
                  "    pm.expect(pm.response.code).to.not.be.NaN;\r",
                  "});\r",
                  "\r",
                  "// МОЖНО, но НЕ рекомендуется: to.be.exist\r",
                  "pm.test(\"Test through the: to.be.exist\", () => {\r",
                  "    pm.expect(pm.response.code).to.be.exist;\r",
                  "});\r",
                  "pm.test(\"Test through the: to.not.be.exist\", () => {\r",
                  "    pm.expect(pm.response.code).to.not.be.exist;\r",
                  "});\r",
                  "\r",
                  "\r",
                  "// МОЖНО, но НЕ рекомендуется: to.be.at.least\r",
                  "//ожидаем, что 200 больше или равно 100-ok\r",
                  "pm.test(\"Test through the: to.be.at.least\", () => {\r",
                  "    pm.expect(pm.response.code).to.be.at.least(100);\r",
                  "});\r",
                  "// ожидаем, что 200 больше или равно 200-ok\r",
                  "pm.test(\"Test through the: to.be.at.least\", () => {\r",
                  "    pm.expect(pm.response.code).to.be.at.least(200);\r",
                  "});\r",
                  "// ожидаем, что 200 больше или равно 300 - false\r",
                  "pm.test(\"Test through the: to.be.at.least\", () => {\r",
                  "    pm.expect(pm.response.code).to.be.at.least(300);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "// МОЖНО, но НЕ рекомендуется: to.be.at.most\r",
                  "// меньше или равно, что 200 меньше или равно 100 - false\r",
                  "pm.test(\"Test through the: to.be.at.most\", () => {\r",
                  "    pm.expect(pm.response.code).to.be.at.most(100);\r",
                  "});\r",
                  "// меньше или равно, что 200 меньше или равно 200 - ok\r",
                  "pm.test(\"Test through the: to.be.at.most\", () => {\r",
                  "    pm.expect(pm.response.code).to.be.at.most(200);\r",
                  "});\r",
                  "// меньше или равно, что 200 меньше или равно 300 - ok\r",
                  "pm.test(\"Test through the: to.be.at.most\", () => {\r",
                  "    pm.expect(pm.response.code).to.be.at.most(300);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "// МОЖНО, но НЕ рекомендуется: to.be.at.within \r",
                  "pm.test(\"Test through the: to.be.at.within\", () => {\r",
                  "    pm.expect(pm.response.code).to.be.at.within(100,300);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "// МОЖНО, но НЕ рекомендуется: closeTo(1 -начало, 0.5-шаг)  \r",
                  "// 201 -+1 ok\r",
                  "pm.test(\"Test through the: closeTo\", () => {\r",
                  "    pm.expect(pm.response.code).to.be.closeTo(200, 1);\r",
                  "});\r",
                  "// 202 -+1 false\r",
                  "pm.test(\"Test through the: closeTo\", () => {\r",
                  "    pm.expect(pm.response.code).to.be.closeTo(202, 1);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "// МОЖНО, но НЕ рекомендуется: to.be.oneOf\r",
                  "pm.test(\"Test through the: to.be.oneOf\", () => {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([100, 201, 300]);\r",
                  "});\r",
                  "pm.test(\"Test through the: to.be.oneOf\", () => {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
                  "});\r",
                  "\r",
                  "//МОЖНО, но НЕ рекомендуется: to.be.finite, лучше to.be.a\r",
                  "pm.test(\"Test through the: to.be.finite\", () => {\r",
                  "    pm.expect(pm.response.code).to.be.finite\r",
                  "});\r",
                  "\r",
                  "// НЕЛЬЗЯ: to.be.an.instanceof\r",
                  "pm.test(\"Test through the: to.be.an.instanceof\", () => {\r",
                  "    pm.expect(pm.response.code).to.be.an.instanceof(Number);\r",
                  "});\r",
                  "// НЕЛЬЗЯ: to.be.empty\r",
                  "pm.test(\"Test through the: to.be.empty\", () => {\r",
                  "    pm.expect(pm.response.code).to.be.empty;\r",
                  "});\r",
                  "pm.test(\"Test through the: to.not.be.empty\", () => {\r",
                  "    pm.expect(pm.response.code).to.not.be.empty;\r",
                  "});\r",
                  "// НЕЛЬЗЯ: для чисел и значений\r",
                  "pm.test(\"Body matches string\", function () {\r",
                  "    pm.expect(pm.response.code).to.include(\"200\");\r",
                  "});\r",
                  "// НЕЛЬЗЯ: стравнивать строку и число: ожидаем строку 200, а статус код - число 200\r",
                  "pm.test(\"Test through the: to.eql\", function () {\r",
                  "    pm.expect(pm.response.code).to.eql(\"200\");\r",
                  "});\r",
                  "//НЕЛЬЗЯ: нельзя стравнивать строку и число\r",
                  "pm.test(\"Test through the:to.deep.include\", () => {\r",
                  "    pm.expect(pm.response.code).to.deep.include(\"200\")\r",
                  "});\r",
                  "//нет - 200 это не строка, а число\r",
                  "pm.test(\"Test through the: to.be.a string\", () => {\r",
                  "    pm.expect(pm.response.code).to.be.a(\"string\")\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "adb58ce6-4c54-48b5-9faa-e6bfe59ee793",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [],
              "options": {
                "formdata": {}
              }
            },
            "url": "https://webstore-platform.qa.govirto.com/#/graphql"
          },
          "response": []
        },
        {
          "name": "200 Node.js",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e93790cb-0303-4cde-8e92-b2ddfc7c5715",
                "exec": [
                  "const assert = require('assert');\r",
                  "\r",
                  "pm.test(\"Test through the: assert.ok\", function () {\r",
                  "    assert.ok(pm.response.code===200);\r",
                  "});\r",
                  "\r",
                  "console.log(pm.response.code);\r",
                  "\r",
                  "pm.test(\"Test through the: assert\", function () {\r",
                  "    assert(pm.response.code===200);\r",
                  "});\r",
                  "// жесткое сравнение типов число и число\r",
                  "pm.test(\"Test through the: assert.strictEqual\", function () {\r",
                  "    assert.strictEqual(pm.response.code,200);\r",
                  "});\r",
                  "// жесткое сравнение типов число и текст\r",
                  "pm.test(\"Test through the: assert.strictEqual\", function () {\r",
                  "    assert.strictEqual(pm.response.code,\"200\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test through the: assert.strictEqual\", function () {\r",
                  "    assert.equal(pm.response.code,\"200\");\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "a8a20751-2c77-4e90-a603-02cf6712585c",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [],
              "options": {
                "formdata": {}
              }
            },
            "url": "https://webstore-platform.qa.govirto.com/#/graphql"
          },
          "response": []
        }
      ],
      "_postman_id": "b5ed1a0e-0a2f-4a5c-9c80-15555c0ec901"
    },
    {
      "name": "text",
      "item": [
        {
          "name": "Text simple",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d1e38922-fa94-4556-b934-a71ed9dca8d0",
                "exec": [
                  "//SNIPPETS\r",
                  "//m.response.to.have.body - это проверка всего тела целиком. \r",
                  "// \\n...n\\- обозначает перенос строки\r",
                  "pm.test(\"Body is correct\", function () {\r",
                  "    pm.response.to.have.body(\"User-agent: *\\nDisallow: /deny\\n\");\r",
                  "});  \r",
                  "\r",
                  "//(pm.response.text()) - это функция текст, то есть эта функция преобразовывает ответ в текстовый вид.\r",
                  "pm.test(\"Body matches string\", function () {\r",
                  "    pm.expect(pm.response.text()).to.include(\"User-agent: *\");\r",
                  "});\r",
                  "console.log (pm.response.text())\r",
                  "\r",
                  "//pm.response.to.have.body - это функция текста, то есть эта функция преобразовывает ответ в текстовый вид.\r",
                  "pm.test(\"Body matches string\", function () {\r",
                  "    pm.response.to.have.body();\r",
                  "});\r",
                  "console.log (pm.response.text())"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "bb558bdf-fac0-4111-bdef-6d6f992cf801",
          "protocolProfileBehavior": {
            "disableBodyPruning": true,
            "disabledSystemHeaders": {
              "accept": true,
              "content-length": true
            }
          },
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "text/plain",
                "type": "text"
              }
            ],
            "url": "http://httpbin.org/robots.txt"
          },
          "response": []
        },
        {
          "name": "Text image simple",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9cfbf8a2-2f5d-4f8e-99d1-1fb85a1db84c",
                "exec": [
                  "//1. все переносы строк нужно экранировать \\ 2. Строка 6 и 10 уже стоит такой сивол, значит сначала нужно экранировать его, а затем экранировать перенос стррк - итого ||| 3. повтор двойных кавычек также нужно заэкранировать, то есть \" \\\" \\\" \" 4. перенос строк \\n\r",
                  "pm.test(\"Body is correct\", function () {\r",
                  "    pm.expect(pm.response.text()).to.include(\"\\n\\\r",
                  "          .-''''''-.\\n\\\r",
                  "        .' _      _ '.\\n\\\r",
                  "       /   O      O   \\\\\\n\\\r",
                  "      :                :\\n\\\r",
                  "      |                |\\n\\\r",
                  "      :       __       :\\n\\\r",
                  "       \\\\  .-\\\"`  `\\\"-.  /\\n\\\r",
                  "        '.          .'\\n\\\r",
                  "          '-......-'\\n\\\r",
                  "          \");\r",
                  "});  \r",
                  "/*\r",
                  "pm.test(\"строка 4\", function () {\r",
                  "    pm.expect(pm.response.text()).to.include(\".-''''''-.\");\r",
                  "});  \r",
                  "pm.test(\"строка 5\", function () {\r",
                  "    pm.expect(pm.response.text()).to.include(\".' _      _ '.\");\r",
                  "}); \r",
                  "..такие цепочки работают только для текста, но не для assert и проверки json объекта.  \r",
                  "pm.test(\"!!!!!!Первые 2 строки цепочкой\", function () {\r",
                  "    pm.expect(pm.response.text()).to.include(\".-''''''-.\").and.include(\".' _      _ '.\"); \r",
                  "}); \r",
                  "//получиться только с большим пробелом после переноса строки, так как эти символы тоже учитываются.\r",
                  "pm.test(\"Первые 2 строки одной строкой\", function () {\r",
                  "    pm.expect(pm.response.text()).to.include(\".-''''''-.\\n        .' _      _ '.\");\r",
                  "}); \r",
                  "pm.test(\"часть\", function () {\r",
                  "    pm.expect(pm.response.text()).to.include(\"YOU SHOULDN\\'T BE HERE\");\r",
                  "}); */"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "e414ad89-c077-4993-bae2-14a9ddd0fb94",
          "protocolProfileBehavior": {
            "disableBodyPruning": true,
            "disabledSystemHeaders": {
              "accept": true,
              "content-length": true
            }
          },
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "text/plain",
                "type": "text"
              }
            ],
            "url": "http://httpbin.org/deny"
          },
          "response": []
        },
        {
          "name": "Text body Chai.js",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "66af9272-4ff4-41f3-90f0-732942a0a173",
                "exec": [
                  "pm.test(\"Body maches через to.equal\", function () {\r",
                  "    pm.expect(pm.response.text()).to.equal(\"User-agent: *\\nDisallow: /deny\\n\");\r",
                  "});\r",
                  "\r",
                  "//chai.js для  текста текста не особо нужен, лучше просто использовать shippets \r",
                  "pm.test(\"Body maches через to.deep.equal\", function () {\r",
                  "    pm.expect(pm.response.text()).to.deep.equal(\"User-agent: *\\nDisallow: /deny\\n\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Body строка\", function () {\r",
                  "    pm.expect(pm.response.text()).to.be.a(\"string\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Body объект\", function () {\r",
                  "    pm.expect(pm.response.text()).to.be.an(\"object\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Body - конкретная строка\", function () {\r",
                  "    pm.expect(pm.response.text()).to.be.a('string', \"само сообщение об ошибке\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Body через to.be.true ==\", function () {\r",
                  "    pm.expect(pm.response.text() == \"User-agent: *\\nDisallow: /deny\\n\").to.be.true;\r",
                  "});\r",
                  "pm.test(\"Body через to.be.true ===\", function () {\r",
                  "    pm.expect(pm.response.text() === \"User-agent: *\\nDisallow: /deny\\n\").to.be.true;\r",
                  "});\r",
                  "pm.test(\"Body через to.be.ok ==\", function () {\r",
                  "    pm.expect(pm.response.text() == \"User-agent: *\\nDisallow: /deny\\n\").to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Body через to.be.ok ===\", function () {\r",
                  "    pm.expect(pm.response.text() === \"User-agent: *\\nDisallow: /deny\\n\").to.be.ok;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Body через to.be.lengthOf\", function () {\r",
                  "    pm.expect(pm.response.text()).to.be.lengthOf(30);\r",
                  "});\r",
                  "pm.test(\"Body через to.be.lengthOf 2\", function () {\r",
                  "    pm.expect(pm.response.text()).to.be.lengthOf.above(20);\r",
                  "});\r",
                  "pm.test(\"Body через to.be.lengthOf 3\", function () {\r",
                  "    pm.expect(pm.response.text()).to.be.lengthOf.below(35);\r",
                  "});\r",
                  "pm.test(\"Body через to.be.lengthOf 4\", function () {\r",
                  "    pm.expect(pm.response.text()).to.be.lengthOf.at.least(25);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Body через to.be.exist\", function () {\r",
                  "    pm.expect(pm.response.text()).to.be.exist;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Body через to.not.be.empty\", function () {\r",
                  "    pm.expect(pm.response.text()).to.not.be.empty;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Body is match - регулярные выражения\", function () {\r",
                  "    pm.expect(pm.response.text()).to.match (/^User-agent: */);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Body to.have.string\", function () {\r",
                  "    pm.expect(pm.response.text()).to.have.string(\"User-agent:\");\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "b7560a71-8b1a-4683-8983-3e2dd57a1d4b",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": "http://httpbin.org/robots.txt"
          },
          "response": []
        },
        {
          "name": "Text body Node.js",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "70857921-699c-4278-a5cf-c9742037b1dd",
                "exec": [
                  "//node.js лучше использовать в случае тестирования числа, либо какого значения внутри json, но не текста  \r",
                  "const assert = require (\"assert\")\r",
                  "\r",
                  "pm.test(\"Через assert.ok\", function () {\r",
                  "    assert.ok(pm.response.text()== \"User-agent: *\\nDisallow: /deny\\n\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Через assert\", function () {\r",
                  "    assert(pm.response.text()===\"User-agent: *\\nDisallow: /deny\\n\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Через assert\", function () {\r",
                  "    assert(pm.response.text()===\"User-agent: *\\nDisallow: /deny\\n\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Через assert.equal ==\", function () {\r",
                  "    assert.equal(pm.response.text(),\"User-agent: *\\nDisallow: /deny\\n\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Через assert.deepEqual ==\", function () {\r",
                  "    assert.deepEqual(pm.response.text(),\"User-agent: *\\nDisallow: /deny\\n\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Через assert.deepStrictEqual ===\", function () {\r",
                  "    assert.deepStrictEqual(pm.response.text(),\"User-agent: *\\nDisallow: /deny\\n\");\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "e547bfcc-9f4f-4d7d-8e7b-3af4a1233de7",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": "http://httpbin.org/robots.txt"
          },
          "response": []
        }
      ],
      "_postman_id": "df63c534-2803-4a63-819b-7a62302521c7"
    },
    {
      "name": "Общие тесты",
      "item": [
        {
          "name": "array",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "72ebce6c-8bcb-402b-89e8-1c31ca4d5e00",
                "exec": [
                  " var jsonData = pm.response.json();\r",
                  "//массив\r",
                  "pm.test(\"Проверка массива\", function () {\r",
                  "pm.expect(jsonData.data.createOrganization.addresses.items).to.be.an(\"array\");\r",
                  "})\r",
                  "\r",
                  "//цепочки с массивами\r",
                  "pm.test(\"Проверка массива на пустоту\", function () {\r",
                  "pm.expect(jsonData.data.createOrganization.addresses.items).to.be.an(\"array\").that.is.not.empty;\r",
                  "})\r",
                  "\r",
                  "pm.test(\"Проверка массива через include по фразе \", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.addresses.items[0].countryName).to.include(\"of America\");\r",
                  "})\r",
                  "\r",
                  "\r",
                  "pm.test(\"Проверка массива через цепочку проверок to.have.an\", function () {\r",
                  "pm.expect(jsonData.data.createOrganization.addresses.items).to.have.an(\"array\").that.deep.includes({\r",
                  "                        \"city\": \"111\",\r",
                  "                        \"countryCode\": \"USA\",\r",
                  "                        \"countryName\": \"United States of America\",\r",
                  "                        \"regionId\": \"AL\",\r",
                  "                        \"regionName\": \"Alabama\",\r",
                  "                        \"postalCode\": \"111111\",\r",
                  "                        \"line1\": \"Adress line 1\",\r",
                  "                        \"zip\": \"222222\"\r",
                  "                    });\r",
                  "})\r",
                  "\r",
                  "pm.test(\"Проверка массива через instanceOf для массив\", function () {\r",
                  "pm.expect(jsonData.data.createOrganization.addresses.items).to.be.an.instanceOf(Array);\r",
                  "})\r",
                  "\r",
                  "pm.test(\"Проверка массива через keys для массива\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.addresses.items).to.have.all.keys(0);\r",
                  "})\r",
                  "\r",
                  "//member включает в себя поиск всех 'элементов, а не части.\r",
                  "pm.test(\"Проверка массива через members из документации - все элементы-сработает\", function () {\r",
                  "    pm.expect([1,2,3]).to.have.members([2,1,3]);\r",
                  "})\r",
                  "pm.test(\"Проверка массива через members из документации-часть элементов-упадет\", function () {\r",
                  "pm.expect([1,2,3]).to.have.members([2,3]);\r",
                  "})\r",
                  "// порядок следования элементов\r",
                  "pm.test(\"Проверка массива через members из документации - порядок следования элементов\", function () {\r",
                  "    pm.expect([1,2,3]).to.have.ordered.members([1,3,2]);\r",
                  "})\r",
                  "pm.test(\"Проверка массива через members - все элементы-сработает\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.addresses.items).to.have.deep.members([\r",
                  "                    {\r",
                  "                        \"city\": \"111\",\r",
                  "                        \"countryCode\": \"USA\",\r",
                  "                        \"countryName\": \"United States of America\",\r",
                  "                        \"regionId\": \"AL\",\r",
                  "                        \"regionName\": \"Alabama\",\r",
                  "                        \"postalCode\": \"111111\",\r",
                  "                        \"line1\": \"Adress line 1\",\r",
                  "                        \"zip\": \"222222\"\r",
                  "                    }\r",
                  "                ]);\r",
                  "})\r",
                  "\r",
                  " \r",
                  "pm.test(\"Проверка массива через include.members часть элементов\", function () {\r",
                  "    pm.expect([1,2,3]).to.include.members([1,3]);\r",
                  "    });\r",
                  "\r",
                  "\r",
                  "\r",
                  "pm.test(\"Проверка массива через to.be.lengthOf\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.addresses.items).to.have.lengthOf(1);\r",
                  "});\r",
                  "pm.test(\"Проверка массива через to.be.lengthOf.at.least\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.addresses.items).to.have.lengthOf.at.least(1);\r",
                  "});\r",
                  "pm.test(\"Проверка массива через to.be.lengthOf.below\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.addresses.items).to.have.lengthOf.below(2);\r",
                  "});\r",
                  "pm.test(\"Проверка массива через to.be.lengthOf.at.most\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.addresses.items).to.have.lengthOf.at.most(1);\r",
                  "});\r",
                  "pm.test(\"Проверка массива через to.be.lengthOf.within\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.addresses.items).to.have.lengthOf.within(0,1);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "\r",
                  "pm.test(\"Проверка массива через to.not.be.null\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.addresses.items).to.not.be.null;\r",
                  "});\r",
                  "pm.test(\"Проверка массива через to.not.be.empty\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.addresses.items).to.not.be.empty;\r",
                  "});\r",
                  "pm.test(\"Проверка массива через to.exist\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.addresses.items).to.exist;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "6f6446f2-0fea-4477-9a6a-fbb46d9ae7f0",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "9226369b-cf1f-4467-8628-bf801a1ee90a",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "api_key",
                "value": "ce3d045144724f2b9ad070180f3c7b82",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation createOrganization ($command: InputCreateOrganizationType!) {\ncreateOrganization (command: $command) {\nid\nname\naddresses {\nitems {\ncity\ncountryCode\ncountryName\nregionId\nregionName\npostalCode\nline1\nzip\n}\n}   \n}\n} ",
                "variables": "{\n\"command\": {\n\"name\":\"{{organization_name}}\",   \n\"addresses\": [{\n\"addressType\": 1,\n\"city\": \"111\",\n\"countryCode\": \"USA\",\n\"countryName\": \"United States of America\",\n\"regionId\": \"AL\",\n\"regionName\": \"Alabama\",\n\"postalCode\": \"111111\",\n\"line1\": \"Adress line 1\",\n\"zip\": \"222222\"\n}]     \n}\n}"
              },
              "options": {
                "graphql": {}
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "string",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cb209719-4b5e-4f04-a0e9-19916f8ae17a",
                "exec": [
                  " var jsonData = pm.response.json();\r",
                  "\r",
                  "pm.test(\"тип свойства - строка\", function () {\r",
                  "pm.expect(jsonData.data.createOrganization.addresses.items[0].postalCode).to.be.a(\"String\");\r",
                  "})\r",
                  "pm.test(\"проверка строки через equal строка  = строка\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.addresses.items[0].postalCode).to.equal(\"111111\");\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"проверка строки include по части слову\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.name).to.include(\"Organiza\");\r",
                  "})\r",
                  "pm.test(\"проверка строки include по полному слову\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.name).to.include(\"Organization_noneed\");\r",
                  "})\r",
                  "pm.test(\"проверка строки deep.include по полному слову\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.name).to.deep.include(\"Organization_noneed\");\r",
                  "})\r",
                  "\r",
                  "\r",
                  "//например, можно протестировать 1. Что поле ввода текста вмещает в себя 40 знаков, и не выводит сообщение об ошибке 2. А далее протестировать, что только определенный диапазон будет показываться в итоге в форме.\r",
                  "pm.test(\"проверка строки через to.be.lengthOf\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.name).to.have.lengthOf(19);\r",
                  "});\r",
                  "pm.test(\"проверка строки через to.be.lengthOf.at.least\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.name).to.have.lengthOf.at.least(1);\r",
                  "});\r",
                  "pm.test(\"проверка строки через to.be.lengthOf.below\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.name).to.have.lengthOf.below(20);\r",
                  "});\r",
                  "pm.test(\"проверка строки через to.be.lengthOf.at.most\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.name).to.have.lengthOf.at.most(19);\r",
                  "});\r",
                  "pm.test(\"проверка строки через to.be.lengthOf.within\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.name).to.have.lengthOf.within(0,25);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "\r",
                  "pm.test(\"проверка строки и числа через to.be.true ==\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.name == \"Organization_noneed\").to.be.true;\r",
                  "});\r",
                  "pm.test(\"проверка строки через to.be.true ===\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.name === \"Organization_noneed\").to.be.true;\r",
                  "});\r",
                  "pm.test(\"проверка строки и числа через to.be.ok ==\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.name == \"Organization_noneed\").to.be.ok;\r",
                  "});\r",
                  "pm.test(\"проверка строки через to.be.ok ===\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.name === \"Organization_noneed\").to.be.ok;\r",
                  "});\r",
                  "\r",
                  "\r",
                  "\r",
                  "pm.test(\"проверка строки через to.not.be.null\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.name).to.not.be.null;\r",
                  "});\r",
                  "pm.test(\"Проверка строки через to.not.be.empty\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.name).to.not.be.empty;\r",
                  "});\r",
                  "pm.test(\"Проверка строки через to.exist\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.name).to.exist;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "a82a269c-bb02-4e5d-bd7d-54c1bdf917d1",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "8c404f5a-d249-4db0-9af0-6fd7a9452a28",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "api_key",
                "value": "ce3d045144724f2b9ad070180f3c7b82",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation createOrganization ($command: InputCreateOrganizationType!) {\ncreateOrganization (command: $command) {\nid\nname\naddresses {\nitems {\ncity\ncountryCode\ncountryName\nregionId\nregionName\npostalCode\nline1\nzip\n}\n}   \n}\n} ",
                "variables": "{\n\"command\": {\n\"name\":\"{{organization_name}}\",   \n\"addresses\": [{\n\"addressType\": 1,\n\"city\": \"111\",\n\"countryCode\": \"USA\",\n\"countryName\": \"United States of America\",\n\"regionId\": \"AL\",\n\"regionName\": \"Alabama\",\n\"postalCode\": \"111111\",\n\"line1\": \"Adress line 1\",\n\"zip\": \"222222\"\n}]     \n}\n}"
              },
              "options": {
                "graphql": {}
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "number Chai.js",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "629a7c85-df47-453a-955b-71d9990b8ab2",
                "exec": [
                  " var jsonData = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Проверка числа через to.be.a\", function () {\r",
                  "pm.expect(jsonData).to.be.a(\"number\");\r",
                  "})\r",
                  "\r",
                  "pm.test(\"Проверка числа через to.equal строка = строка\", function () {\r",
                  "    pm.expect(jsonData).to.equal(111111);\r",
                  "})\r",
                  "\r",
                  "// include логичнее для объектов и массивов. для чисел НЕ РАБОТАЕТ\r",
                  "pm.test(\"Проверка числа через to.include по части числа\", function () {\r",
                  "    pm.expect(jsonData).to.include(99);\r",
                  "})\r",
                  "pm.test(\"Проверка числа через include по полному числу\", function () {\r",
                  "    pm.expect(jsonData).to.include(99);\r",
                  "})\r",
                  "pm.test(\"Проверка числа через deep.include по полному числу\", function () {\r",
                  "    pm.expect(jsonData).to.deep.include(99);\r",
                  "})\r",
                  "\r",
                  "//моем проверить, что форма вмешает напимер имя больше\r",
                  "pm.test(\"проверка числа через to.be.oneOf\", function () {\r",
                  "    pm.expect(jsonData).to.have.oneOf([201,200,202]);\r",
                  "});\r",
                  "pm.test(\"проверка числа через to.be.below\", function () {\r",
                  "    pm.expect(jsonData).to.be.below(210);\r",
                  "});\r",
                  "pm.test(\"проверка числа через to.be.above\", function () {\r",
                  "    pm.expect(jsonData).to.be.above(100);\r",
                  "});\r",
                  "\r",
                  "// num = jsonData.....\r",
                  "pm.test(\"проверка числа и строки через to.be.true ==\", function () {\r",
                  "    pm.expect(num == \"33\").to.be.true;\r",
                  "});\r",
                  "pm.test(\"проверка числа через to.be.true ===\", function () {\r",
                  "    pm.expect(num === 33).to.be.true;\r",
                  "});\r",
                  "pm.test(\"проверка числа и строки через to.be.ok ==\", function () {\r",
                  "    pm.expect(num == \"33\").to.be.ok;\r",
                  "});\r",
                  "pm.test(\"проверка числа через to.be.ok ===\", function () {\r",
                  "    pm.expect(num === 33).to.be.ok;\r",
                  "});\r",
                  "\r",
                  "\r",
                  "//Nan, exist не рекомендуется, лучше через equal\r",
                  "pm.test(\"проверка числа через to.not.be.null\", function () {\r",
                  "    pm.expect(num).to.not.be.null;\r",
                  "});\r",
                  "pm.test(\"Проверка числа через to.not.be.empty - для чисел НЕ РАБОТАЕТ\", function () {\r",
                  "    pm.expect(num).to.not.be.empty;\r",
                  "});\r",
                  "pm.test(\"Проверка числа через to.not.be.undefined\", function () {\r",
                  "    pm.expect(num).to.be.undefined;\r",
                  "});\r",
                  "pm.test(\"Проверка числа через to.not.be.NaN\", function () {\r",
                  "    pm.expect(num).to.not.be.NaN;\r",
                  "});\r",
                  "pm.test(\"Проверка числа через to.exist\", function () {\r",
                  "    pm.expect(num).to.exist;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "fe558418-b3a4-49be-8ddf-3baa5da14690",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "60114359-4fcf-4171-8752-af0909a195a0",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "api_key",
                "value": "ce3d045144724f2b9ad070180f3c7b82",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation createOrganization ($command: InputCreateOrganizationType!) {\ncreateOrganization (command: $command) {\nid\nname\naddresses {\nitems {\ncity\ncountryCode\ncountryName\nregionId\nregionName\npostalCode\nline1\nzip\n}\n}   \n}\n} ",
                "variables": "{\n\"command\": {\n\"name\":\"{{organization_name}}\",   \n\"addresses\": [{\n\"addressType\": 1,\n\"city\": \"111\",\n\"countryCode\": \"USA\",\n\"countryName\": \"United States of America\",\n\"regionId\": \"AL\",\n\"regionName\": \"Alabama\",\n\"postalCode\": \"111111\",\n\"line1\": \"Adress line 1\",\n\"zip\": \"222222\"\n}]     \n}\n}"
              },
              "options": {
                "graphql": {}
              }
            },
            "url": "{{url}}"
          },
          "response": []
        }
      ],
      "_postman_id": "06555f3e-04d1-4a7f-a5b3-e9bd249bea44"
    },
    {
      "name": "Json body Chai.js",
      "item": [
        {
          "name": "получение JSON body",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a6e1a67e-2136-4066-8fd2-f08c01148a84",
                "exec": [
                  "/*\r",
                  "//эта запись лучше!\r",
                  "// возможно проверять несколько строк пар ключ-значение в одном тесте.\r",
                  "var jsonData = pm.response.json();\r",
                  "    pm.test(\"Your test name\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.name).to.eql(\"Organization_noneed\")\r",
                  "    pm.expect(jsonData.data.createOrganization.addresses.items[0].countryName).to.eql(\"United States of America\")\r",
                  "});\r",
                  "console.log (jsonData)\r",
                  "*/\r",
                  "\r",
                  "//фактически json - это тоже текст, то есть тексты на текст также могут подойти? в примере ниже будет падать, так как id будет постоянно новый.\r",
                  "pm.test(\"Body matches string\", function () {\r",
                  "    pm.response.to.have.body('{\"data\":{\"createOrganization\":{\"id\": \"3c3c767e-5ab0-4fc0-97f9-99be8fb6757d\",\"name\":\"Organization_noneed\",\"addresses\":{\"items\":[{\"city\":\"111\",\"countryCode\":\"USA\",\"countryName\":\"United States of America\",\"regionId\":\"AL\",\"regionName\":\"Alabama\",\"postalCode\":\"111111\",\"line1\": \"Adress line 1\",\"zip\":\"222222\"}]}}}}');\r",
                  "});\r",
                  "\r",
                  "// такие записи возможно тоже, но лучше не использовать\r",
                  "pm.test(\"Body matches string\", function () {\r",
                  "    pm.expect(pm.response.text()).to.include(\"Organization_noneed\");\r",
                  "});\r",
                  "console.log (pm.response.text())\r",
                  "\r",
                  "pm.test(\"Body matches string\", function () {\r",
                  "    pm.expect(pm.response.text()).to.include(\"Alabama\");\r",
                  "});\r",
                  "console.log (pm.response.text())\r",
                  "\r",
                  "// еще один вариант\r",
                  "pm.test(\"Body have.jsonBody\", function () {\r",
                  "    pm.response.to.have.jsonBody(\"Alabama\");\r",
                  "});\r",
                  "console.log (pm.response.text())"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "677048e3-0333-45cf-a378-46cd15082204",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "027908f0-4c4d-46d5-9d63-91d315ed8d5e",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "api_key",
                "value": "ce3d045144724f2b9ad070180f3c7b82",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation createOrganization ($command: InputCreateOrganizationType!) {\ncreateOrganization (command: $command) {\nid\nname\naddresses {\nitems {\ncity\ncountryCode\ncountryName\nregionId\nregionName\npostalCode\nline1\nzip\n}\n}   \n}\n} ",
                "variables": "{\n\"command\": {\n\"name\":\"{{organization_name}}\",   \n\"addresses\": [{\n\"addressType\": 1,\n\"city\": \"111\",\n\"countryCode\": \"USA\",\n\"countryName\": \"United States of America\",\n\"regionId\": \"AL\",\n\"regionName\": \"Alabama\",\n\"postalCode\": \"111111\",\n\"line1\": \"Adress line 1\",\n\"zip\": \"222222\"\n}]     \n}\n}"
              },
              "options": {
                "graphql": {}
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "получение JSON body Chai.js",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "dd506b27-226d-4587-a861-a6bddc5d956f",
                "exec": [
                  "    var jsonData = pm.response.json();\r",
                  "\r",
                  "\r",
                  "//ДЛЯ ПРОВЕРКИ ПРОСТОГО СВОЙСТВА можно импользовать любую запись ниже:eql equal deep.equal\r",
                  "// значения - любые простые параметры, объекты - массив целиков, либо json объект целиком\r",
                  "// !!!deep.equal = eql. Для проверки одного поля. Для проверки дочернего объекта\r",
                  "//полное совпадение === строки: eql работает как со - ЗНАЧЕНИЯМИ И ОБЪЕКТАМИ\r",
                  "pm.test(\"Тест через eql\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.addresses.items[0].regionName).to.eql(\"Alabama\");\r",
                  "});\r",
                  "\r",
                  "//полное совпадение === строки: deep.equal работает как со ЗНАЧЕНИЯМИ И ОБЪЕКТАМИ\r",
                  "pm.test(\"Тест через deep.equal\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.addresses.items[0].regionName).to.deep.equal(\"Alabama\");\r",
                  "}); \r",
                  "// !!!equal Для проверки одного поля. Плохо работает для дочернего объекта\r",
                  "//полное совпадение === строки equal: работает только со ЗНАЧЕНИЯМИ value  \r",
                  "pm.test(\"Тест через equal\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.addresses.items[0].regionName).to.equal(\"Alabama\");\r",
                  "}); \r",
                  "\r",
                  "\r",
                  "//ДЛЯ ПРОВЕРКИ ВСЕГО ОБЪЕКТА\r",
                  "pm.test(\"Тест через eql\", function () {\r",
                  "    pm.expect(jsonData).to.eql({\r",
                  "    \"data\": {\r",
                  "        \"createOrganization\": {\r",
                  "            \"id\": \"b3e2c215-4b86-46d5-a131-be6efd361862\",\r",
                  "            \"name\": \"Organization_noneed\",\r",
                  "            \"addresses\": {\r",
                  "                \"items\": [\r",
                  "                    {\r",
                  "                        \"city\": \"111\",\r",
                  "                        \"countryCode\": \"USA\",\r",
                  "                        \"countryName\": \"United States of America\",\r",
                  "                        \"regionId\": \"AL\",\r",
                  "                        \"regionName\": \"Alabama\",\r",
                  "                        \"postalCode\": \"111111\",\r",
                  "                        \"line1\": \"Adress line 1\",\r",
                  "                        \"zip\": \"222222\"\r",
                  "                    }\r",
                  "                ]\r",
                  "            }\r",
                  "        }\r",
                  "    }\r",
                  "});\r",
                  "}); \r",
                  "pm.test(\"Тест через equal\", function () {\r",
                  "    pm.expect(jsonData).to.equal({\r",
                  "    \"data\": {\r",
                  "        \"createOrganization\": {\r",
                  "            \"id\": \"b3e2c215-4b86-46d5-a131-be6efd361862\",\r",
                  "            \"name\": \"Organization_noneed\",\r",
                  "            \"addresses\": {\r",
                  "                \"items\": [\r",
                  "                    {\r",
                  "                        \"city\": \"111\",\r",
                  "                        \"countryCode\": \"USA\",\r",
                  "                        \"countryName\": \"United States of America\",\r",
                  "                        \"regionId\": \"AL\",\r",
                  "                        \"regionName\": \"Alabama\",\r",
                  "                        \"postalCode\": \"111111\",\r",
                  "                        \"line1\": \"Adress line 1\",\r",
                  "                        \"zip\": \"222222\"\r",
                  "                    }\r",
                  "                ]\r",
                  "            }\r",
                  "        }\r",
                  "    }\r",
                  "});\r",
                  "}); \r",
                  "\r",
                  "\r",
                  "pm.test(\"Тест через deep.equal\", function () {\r",
                  "    pm.expect(jsonData).to.deep.equal({\r",
                  "    \"data\": {\r",
                  "        \"createOrganization\": {\r",
                  "            \"id\": \"b3e2c215-4b86-46d5-a131-be6efd361862\",\r",
                  "            \"name\": \"Organization_noneed\",\r",
                  "            \"addresses\": {\r",
                  "                \"items\": [\r",
                  "                    {\r",
                  "                        \"city\": \"111\",\r",
                  "                        \"countryCode\": \"USA\",\r",
                  "                        \"countryName\": \"United States of America\",\r",
                  "                        \"regionId\": \"AL\",\r",
                  "                        \"regionName\": \"Alabama\",\r",
                  "                        \"postalCode\": \"111111\",\r",
                  "                        \"line1\": \"Adress line 1\",\r",
                  "                        \"zip\": \"222222\"\r",
                  "                    }\r",
                  "                ]\r",
                  "            }\r",
                  "        }\r",
                  "    }\r",
                  "});\r",
                  "}); "
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "008dd2f3-195a-499c-bf9d-a1ef6cc06475",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "7a7b02b8-e27e-4883-84d1-83d6961a9287",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "api_key",
                "value": "ce3d045144724f2b9ad070180f3c7b82",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation createOrganization ($command: InputCreateOrganizationType!) {\ncreateOrganization (command: $command) {\nid\nname\naddresses {\nitems {\ncity\ncountryCode\ncountryName\nregionId\nregionName\npostalCode\nline1\nzip\n}\n}   \n}\n} ",
                "variables": "{\n\"command\": {\n\"name\":\"{{organization_name}}\",   \n\"addresses\": [{\n\"addressType\": 1,\n\"city\": \"111\",\n\"countryCode\": \"USA\",\n\"countryName\": \"United States of America\",\n\"regionId\": \"AL\",\n\"regionName\": \"Alabama\",\n\"postalCode\": \"111111\",\n\"line1\": \"Adress line 1\",\n\"zip\": \"222222\"\n}]     \n}\n}"
              },
              "options": {
                "graphql": {}
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "equal | eql | deep.equal Chai.js",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8ba4f5f0-b552-4ca0-a9cb-a151ba49ba29",
                "exec": [
                  "    var jsonData = pm.response.json();\r",
                  "\r",
                  "// ТОЧНОЕ И НЕ ТОЧНОЕ РАВЕНСТВО\r",
                  "pm.test(\"equal строка  = число\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.addresses.items[0].postalCode).to.equal(111111);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"equal строка = строка\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.addresses.items[0].postalCode).to.equal(\"111111\");\r",
                  "})\r",
                  "\r",
                  "pm.test(\"deep equal строка = число\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.addresses.items[0].postalCode).to.deep.equal(111111);\r",
                  "})\r",
                  "\r",
                  "pm.test(\"deep equal строка = строка\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.addresses.items[0].postalCode).to.deep.equal(\"111111\");\r",
                  "})\r",
                  "\r",
                  "pm.test(\"eql строка = число\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.addresses.items[0].postalCode).to.eql(111111);\r",
                  "})\r",
                  "\r",
                  "pm.test(\"eql строка = строка\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.addresses.items[0].postalCode).to.eql(\"111111\");\r",
                  "})\r",
                  "\r",
                  "\r",
                  "\r",
                  "pm.test(\"eql массив должен сработать\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.addresses.items).to.eql([\r",
                  "                    {\r",
                  "                        \"city\": \"111\",\r",
                  "                        \"countryCode\": \"USA\",\r",
                  "                        \"countryName\": \"United States of America\",\r",
                  "                        \"regionId\": \"AL\",\r",
                  "                        \"regionName\": \"Alabama\",\r",
                  "                        \"postalCode\": \"111111\",\r",
                  "                        \"line1\": \"Adress line 1\",\r",
                  "                        \"zip\": \"222222\"\r",
                  "                    }\r",
                  "                ]);\r",
                  "})\r",
                  "\r",
                  "pm.test(\"equal массив - упадет так как не умеет работать с дочерними элементами\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.addresses.items).to.equal([\r",
                  "                    {\r",
                  "                        \"city\": \"111\",\r",
                  "                        \"countryCode\": \"USA\",\r",
                  "                        \"countryName\": \"United States of America\",\r",
                  "                        \"regionId\": \"AL\",\r",
                  "                        \"regionName\": \"Alabama\",\r",
                  "                        \"postalCode\": \"111111\",\r",
                  "                        \"line1\": \"Adress line 1\",\r",
                  "                        \"zip\": \"222222\"\r",
                  "                    }\r",
                  "                ]);\r",
                  "})\r",
                  "\r",
                  "\r",
                  "pm.test(\"deep.equal массив - должен сработать\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.addresses.items).to.deep.equal([\r",
                  "                    {\r",
                  "                        \"city\": \"111\",\r",
                  "                        \"countryCode\": \"USA\",\r",
                  "                        \"countryName\": \"United States of America\",\r",
                  "                        \"regionId\": \"AL\",\r",
                  "                        \"regionName\": \"Alabama\",\r",
                  "                        \"postalCode\": \"111111\",\r",
                  "                        \"line1\": \"Adress line 1\",\r",
                  "                        \"zip\": \"222222\"\r",
                  "                    }\r",
                  "                ]);\r",
                  "})\r",
                  "\r",
                  "\r",
                  "\r",
                  "\r",
                  "\r",
                  "console.log (jsonData.data)"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "9ae17df0-880f-4c37-8048-7b0f59770141",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "976610e1-0947-4df6-aa77-321a2823891b",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "api_key",
                "value": "ce3d045144724f2b9ad070180f3c7b82",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation createOrganization ($command: InputCreateOrganizationType!) {\ncreateOrganization (command: $command) {\nid\nname\naddresses {\nitems {\ncity\ncountryCode\ncountryName\nregionId\nregionName\npostalCode\nline1\nzip\n}\n}   \n}\n} ",
                "variables": "{\n\"command\": {\n\"name\":\"{{organization_name}}\",   \n\"addresses\": [{\n\"addressType\": 1,\n\"city\": \"111\",\n\"countryCode\": \"USA\",\n\"countryName\": \"United States of America\",\n\"regionId\": \"AL\",\n\"regionName\": \"Alabama\",\n\"postalCode\": \"111111\",\n\"line1\": \"Adress line 1\",\n\"zip\": \"222222\"\n}]     \n}\n}"
              },
              "options": {
                "graphql": {}
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "проверка числа и строки",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b5b80de9-a991-404e-b12b-993bfd40c5b9",
                "exec": [
                  "    var jsonData = pm.response.json();\r",
                  "\r",
                  "// chai.js\r",
                  "pm.test(\"to.be.true; строка  = число\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.addresses.items[0].postalCode == 111111).to.be.true;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"to.be.ok строка  = число\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.addresses.items[0].postalCode == 111111).to.be.ok;\r",
                  "});\r",
                  "\r",
                  "\r",
                  "// Node.js\r",
                  "const assert = require (\"assert\")\r",
                  "pm.test(\"assert.ok строка  = число\", function () {\r",
                  "    assert.ok(jsonData.data.createOrganization.addresses.items[0].postalCode == 111111);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"assert строка  = число\", function () {\r",
                  "    assert(jsonData.data.createOrganization.addresses.items[0].postalCode == 111111);\r",
                  "});\r",
                  "\r",
                  "//deepEqual устаревшее, но для примитивного сравшнения использовать можно, но лучше использовать deepStrictEqual\r",
                  "pm.test(\"deepEqual == / строка  = число, пройдет - сравнение не строгое \", function () {\r",
                  "    assert.deepEqual(jsonData.data.createOrganization.addresses.items[0].postalCode,111111);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"deepStrictEqual === / строка  = число. не пройдет, так как строго сравнение\", function () {\r",
                  "    assert.deepStrictEqual(jsonData.data.createOrganization.addresses.items[0].postalCode,111111);\r",
                  "});\r",
                  "console.log (jsonData.data)"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "ae6b18bb-bc35-4627-8d1a-434a9d2b678f",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "e7ec3aeb-011b-4745-b175-7888cb58add2",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "api_key",
                "value": "ce3d045144724f2b9ad070180f3c7b82",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation createOrganization ($command: InputCreateOrganizationType!) {\ncreateOrganization (command: $command) {\nid\nname\naddresses {\nitems {\ncity\ncountryCode\ncountryName\nregionId\nregionName\npostalCode\nline1\nzip\n}\n}   \n}\n} ",
                "variables": "{\n\"command\": {\n\"name\":\"{{organization_name}}\",   \n\"addresses\": [{\n\"addressType\": 1,\n\"city\": \"111\",\n\"countryCode\": \"USA\",\n\"countryName\": \"United States of America\",\n\"regionId\": \"AL\",\n\"regionName\": \"Alabama\",\n\"postalCode\": \"111111\",\n\"line1\": \"Adress line 1\",\n\"zip\": \"222222\"\n}]     \n}\n}"
              },
              "options": {
                "graphql": {}
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "include | nested Chai.js",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9c7e8779-cbbf-4b70-8550-f6ef7176a356",
                "exec": [
                  " /*   var jsonData = pm.response.json();\r",
                  "\r",
                  "// chai.js\r",
                  "// include - для тестирования простого объекта, который содержит в себе наборы ключ-значение: строка, число, часть строки или часть числа, вхождение элемента внутри объекта\r",
                  "// deep.include - для тестирования как простого объекта, который содержит в себе наборы ключ-значение: строка, число, часть строки или часть числа, вхождение элемента внутри объекта, так и для тестирование дочернего элемента \r",
                  "//ищем внутри простого элемента\r",
                  "pm.test(\"include по полному слову\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.name).to.include(\"Organization_noneed\");\r",
                  "})\r",
                  "pm.test(\"deep.include по полному слову\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.name).to.deep.include(\"Organization_noneed\");\r",
                  "})\r",
                  "\r",
                  "pm.test(\"include по части слова\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.name).to.include(\"Org\");\r",
                  "})\r",
                  "pm.test(\"deep.include по части слова\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.name).to.deep.include(\"Org\");\r",
                  "})\r",
                  "\r",
                  "pm.test(\"include по фразе \", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.addresses.items[0].countryName).to.include(\"of America\");\r",
                  "})\r",
                  "pm.test(\"deep.include по фразе\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.addresses.items[0].countryName).to.include(\"of America\");\r",
                  "})\r",
                  "\r",
                  "\r",
                  "//ищем внутри объекта json\r",
                  "pm.test(\"include по всему объекту - упадет\", function () {\r",
                  "    pm.expect(jsonData).to.include(\"of America\");\r",
                  "})\r",
                  "pm.test(\"deep.include по всему объекту - упадет\", function () {\r",
                  "    pm.expect(jsonData).to.deep.include(\"of America\");\r",
                  "})\r",
                  "\r",
                  "//ищем весь объект json. с указание номера массива!\r",
                  "pm.test(\"include весь объект\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.addresses.items[0]).to.include({\r",
                  "                        \"city\": \"111\",\r",
                  "                        \"countryCode\": \"USA\",\r",
                  "                        \"countryName\": \"United States of America\",\r",
                  "                        \"regionId\": \"AL\",\r",
                  "                        \"regionName\": \"Alabama\",\r",
                  "                        \"postalCode\": \"111111\",\r",
                  "                        \"line1\": \"Adress line 1\",\r",
                  "                        \"zip\": \"222222\"\r",
                  "                    });\r",
                  "})\r",
                  "//ищем весь объект json без указание номера массива!\r",
                  "pm.test(\"deep.include весь объект\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.addresses.items).to.deep.include({\r",
                  "                        \"city\": \"111\",\r",
                  "                        \"countryCode\": \"USA\",\r",
                  "                        \"countryName\": \"United States of America\",\r",
                  "                        \"regionId\": \"AL\",\r",
                  "                        \"regionName\": \"Alabama\",\r",
                  "                        \"postalCode\": \"111111\",\r",
                  "                        \"line1\": \"Adress line 1\",\r",
                  "                        \"zip\": \"222222\"\r",
                  "                    });\r",
                  "})\r",
                  "\r",
                  "pm.test(\"include часть объекта\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization).to.include({\"name\":\"Organization_noneed\"});\r",
                  "})\r",
                  "pm.test(\"deep.include часть объекта\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization).to.deep.include({\"name\":\"Organization_noneed\"});\r",
                  "})\r",
                  "\r",
                  "pm.test(\"include часть объекта глубже\", function () {\r",
                  "pm.expect(jsonData.data.createOrganization.addresses.items[0]).to.include({\"city\":\"111\"});\r",
                  "})\r",
                  "pm.test(\"deep.include часть объекта глубже\", function () {\r",
                  "pm.expect(jsonData.data.createOrganization.addresses.items[0]).to.deep.include({\"city\":\"111\"});\r",
                  "})\r",
                  "*/\r",
                  "\r",
                  "var jsonData = pm.response.json()\r",
                  "// !!!! КАК ДЕЛАТЬ ПОИСК ПО ВСЕМУ ОБЪЕКТУ целого дочернего элемента - этот тест не срабатывает, почему?\r",
                  "pm.test(\"deep.include весь объект\", function () {\r",
                  "    pm.expect(jsonData.data).to.include({\r",
                  "        \"createOrganization\": {\r",
                  "            \"id\": \"ae1a6c50-b1c6-49d2-add9-7b333d8b61b6\",\r",
                  "            \"name\": \"Organization_noneed\",\r",
                  "            \"addresses\": {\r",
                  "                \"items\": [\r",
                  "                    {\r",
                  "                        \"city\": \"111\",\r",
                  "                        \"countryCode\": \"USA\",\r",
                  "                        \"countryName\": \"United States of America\",\r",
                  "                        \"regionId\": \"AL\",\r",
                  "                        \"regionName\": \"Alabama\",\r",
                  "                        \"postalCode\": \"111111\",\r",
                  "                        \"line1\": \"Adress line 1\",\r",
                  "                        \"zip\": \"222222\"\r",
                  "                    }\r",
                  "                ]\r",
                  "        }\r",
                  "    }\r",
                  "});\r",
                  "})\r",
                  "\r",
                  "// !!!! КАК ДЕЛАТЬ ПОИСК ПО ВСЕМУ ОБЪЕКТУ - этот тест не срабатывает, почему?\r",
                  "//для проверки ЦЕЛОГО ДОЧЕРНЕГО ЭЛЕМЕНТА лучше deep.include\r",
                  "pm.test(\"deep.include весь объект\", function () {\r",
                  "    pm.expect(jsonData.data).to.deep.include({\r",
                  "    \"data\": {\r",
                  "        \"createOrganization\": {\r",
                  "            \"id\": \"5272a3ae-9d68-4668-8a68-56ec902e52e7\",\r",
                  "            \"name\": \"Organization_noneed\",\r",
                  "            \"addresses\": {\r",
                  "                \"items\": [\r",
                  "                    {\r",
                  "                        \"city\": \"111\",\r",
                  "                        \"countryCode\": \"USA\",\r",
                  "                        \"countryName\": \"United States of America\",\r",
                  "                        \"regionId\": \"AL\",\r",
                  "                        \"regionName\": \"Alabama\",\r",
                  "                        \"postalCode\": \"111111\",\r",
                  "                        \"line1\": \"Adress line 1\",\r",
                  "                        \"zip\": \"222222\"\r",
                  "                    }\r",
                  "                ]\r",
                  "            }\r",
                  "        }\r",
                  "    }\r",
                  "});\r",
                  "})\r",
                  "console.log (jsonData)\r",
                  "//NESTED\r",
                  "pm.test(\"nested.include\", function () {\r",
                  "    pm.expect(jsonData).to.nested.include({'data.createOrganization.addresses.items[0].countryName':'United States of America'});\r",
                  "})\r",
                  "\r",
                  "pm.test(\"deep.nested.include\", function () {\r",
                  "    pm.expect(jsonData).to.deep.nested.include({'data.createOrganization.addresses.items[0].countryName':'United States of America'});\r",
                  "})"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "73d0e36c-8e9a-4687-84f5-d84eda19cbf5",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "26ec521e-60fa-4185-99df-75df00eed292",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "api_key",
                "value": "ce3d045144724f2b9ad070180f3c7b82",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation createOrganization ($command: InputCreateOrganizationType!) {\ncreateOrganization (command: $command) {\nid\nname\naddresses {\nitems {\ncity\ncountryCode\ncountryName\nregionId\nregionName\npostalCode\nline1\nzip\n}\n}   \n}\n} ",
                "variables": "{\n\"command\": {\n\"name\":\"{{organization_name}}\",   \n\"addresses\": [{\n\"addressType\": 1,\n\"city\": \"111\",\n\"countryCode\": \"USA\",\n\"countryName\": \"United States of America\",\n\"regionId\": \"AL\",\n\"regionName\": \"Alabama\",\n\"postalCode\": \"111111\",\n\"line1\": \"Adress line 1\",\n\"zip\": \"222222\"\n}]     \n}\n}"
              },
              "options": {
                "graphql": {}
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": ".property Chai.js",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ceefa0c4-4d4e-43a9-ab7a-10dccd9e0602",
                "exec": [
                  "    var jsonData = pm.response.json();\r",
                  "//to.have.property=to.have.a.property=to.equal  проверка ключа\r",
                  "pm.test(\"to.have.property есть свойство data\", function () {\r",
                  "    pm.expect(jsonData).to.have.property('data');\r",
                  "})\r",
                  "pm.test(\"to.equal есть свойство countryCode\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.addresses.items[0].countryCode).to.equal('USA');\r",
                  "})\r",
                  "pm.test(\"to.have.a.property есть свойство data\", function () {\r",
                  "    pm.expect(jsonData).to.a.have.property('data');\r",
                  "})\r",
                  "\r",
                  "pm.test(\"to.have.property есть свойство name\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization).to.have.property('name');\r",
                  "})\r",
                  "// have.deep.property не сработает для простого значения\r",
                  "pm.test(\"to.have.deep.property\", function () {\r",
                  "    pm.expect(jsonData).to.have.deep.property('name');\r",
                  "})\r",
                  "\r",
                  "// проверка ключа  + свойства\r",
                  "pm.test(\"to.have.property есть свойство name + проверяем его значение\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization).to.have.property('name',\"Organization_noneed\");\r",
                  "}) \r",
                  "\r",
                  "// deep\r",
                  "pm.test(\"проверяем дочерний элемент - свойство countryCode\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.addresses.items[0]).to.have.property('countryCode');\r",
                  "})\r",
                  "\r",
                  "// этот тест не сработает без deep\r",
                  "pm.test(\"проверяем дочерний элемент - свойство items и его значение\", function () {\r",
                  "    pm.expect(jsonData.data).to.have.property(\"createOrganization\",{\r",
                  "                       \"id\": \"2ac67d6e-ebd4-4e9c-8469-84c3e0183395\",\r",
                  "            \"name\": \"Organization_noneed\",\r",
                  "                    });\r",
                  "})\r",
                  "// обе записи nested ниже одинаковые\r",
                  "//nested - позволяет прописать путь к объекту в dot and bracket нотации\r",
                  "pm.test(\"проверяем дочерний элемент - свойство countryName\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.addresses.items[0]).to.have.property(\"countryName\",\"United States of America\");\r",
                  "})\r",
                  "//nested - \r",
                  "pm.test(\"проверяем дочерний элемент через nested - свойство countryName\", function () {\r",
                  "    pm.expect(jsonData).to.have.nested.property(\"data.createOrganization.addresses.items[0].countryName\",\"United States of America\");\r",
                  "})\r",
                  "\r",
                  "\r",
                  "// ДЛЯ МАССИВОВ используется deep\r",
                  "pm.test(\"массив\", function () {\r",
                  "pm.expect(jsonData.data.createOrganization.addresses).to.have.deep.property(\"items\", [\r",
                  "                    {\r",
                  "                        \"city\": \"111\",\r",
                  "                        \"countryCode\": \"USA\",\r",
                  "                        \"countryName\": \"United States of America\",\r",
                  "                        \"regionId\": \"AL\",\r",
                  "                        \"regionName\": \"Alabama\",\r",
                  "                        \"postalCode\": \"111111\",\r",
                  "                        \"line1\": \"Adress line 1\",\r",
                  "                        \"zip\": \"222222\"\r",
                  "                    }\r",
                  "                ]);\r",
                  "})\r",
                  "\r",
                  "// для ключей в объекте\r",
                  "pm.test(\"для ключей в объекте\", function () {\r",
                  "pm.expect(jsonData).to.include.property({\"id\": \"7ef5e615-b2c5-4567-92e9-f1e85c0a7d05\",\r",
                  "            \"name\": \"Organization_noneed\"});\r",
                  "})\r",
                  "\r",
                  "// для ключей в объекте\r",
                  "pm.test(\"для ключей в объекте\", function () {\r",
                  "pm.expect(jsonData).to.deep.include.property({\"id\": \"7ef5e615-b2c5-4567-92e9-f1e85c0a7d05\",\r",
                  "            \"name\": \"Organization_noneed\"});\r",
                  "})\r",
                  "\r",
                  "// Тип свойства число или строка\r",
                  "pm.test(\"Проверяем тип свойства - число\", function () {\r",
                  "pm.expect(jsonData.data.createOrganization.addresses.items[0]).to.deep.include.property(\"city\").that.is.a(\"number\");\r",
                  "})\r",
                  "\r",
                  "pm.test(\"Проверяем тип свойства - строка \", function () {\r",
                  "pm.expect(jsonData.data.createOrganization.addresses.items[0]).to.deep.include.property(\"city\").that.is.a(\"String\");\r",
                  "})"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "26263a3d-e994-4ccf-8c56-50174c38cb50",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "3dc0388d-f2de-40ba-a6a5-e6725e345e70",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "api_key",
                "value": "ce3d045144724f2b9ad070180f3c7b82",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation createOrganization ($command: InputCreateOrganizationType!) {\ncreateOrganization (command: $command) {\nid\nname\naddresses {\nitems {\ncity\ncountryCode\ncountryName\nregionId\nregionName\npostalCode\nline1\nzip\n}\n}   \n}\n} ",
                "variables": "{\n\"command\": {\n\"name\":\"{{organization_name}}\",   \n\"addresses\": [{\n\"addressType\": 1,\n\"city\": \"111\",\n\"countryCode\": \"USA\",\n\"countryName\": \"United States of America\",\n\"regionId\": \"AL\",\n\"regionName\": \"Alabama\",\n\"postalCode\": \"111111\",\n\"line1\": \"Adress line 1\",\n\"zip\": \"222222\"\n}]     \n}\n}"
              },
              "options": {
                "graphql": {}
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": ".keys Chai.js",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1f4a4368-9780-4f7b-abe5-e1fd426d4ac5",
                "exec": [
                  "    var jsonData = pm.response.json();\r",
                  "//keys для простых ключей\r",
                  "pm.test(\"есть простое свойство keys\", function () {\r",
                  "    pm.expect(jsonData.data).to.have.all.keys('createOrganization');\r",
                  "})\r",
                  "\r",
                  "pm.test(\"есть все свойства keys\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization).to.have.all.keys('id', 'name', 'addresses');\r",
                  "})\r",
                  "\r",
                  "//keys для массивов\r",
                  "pm.test(\"keys для массива\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.addresses.items).to.have.all.keys(0);\r",
                  "})\r",
                  "\r",
                  "//any.keys для простых ключей\r",
                  "pm.test(\"any.keys\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization).to.have.any.keys('id','addresses');\r",
                  "})\r",
                  "\r",
                  "// для проверки наличия ключей в Chai.js можно использовать\r",
                  "// to.have.property.\r",
                  "// to.have.all.keys\r",
                  "// to.have.any.keys\r",
                  "// property = keys\r",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "3a37493c-8446-4672-ba8c-826536b97549",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "8143ab29-4669-4afb-8eda-6a6fbcb46818",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "api_key",
                "value": "ce3d045144724f2b9ad070180f3c7b82",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation createOrganization ($command: InputCreateOrganizationType!) {\ncreateOrganization (command: $command) {\nid\nname\naddresses {\nitems {\ncity\ncountryCode\ncountryName\nregionId\nregionName\npostalCode\nline1\nzip\n}\n}   \n}\n} ",
                "variables": "{\n\"command\": {\n\"name\":\"{{organization_name}}\",   \n\"addresses\": [{\n\"addressType\": 1,\n\"city\": \"111\",\n\"countryCode\": \"USA\",\n\"countryName\": \"United States of America\",\n\"regionId\": \"AL\",\n\"regionName\": \"Alabama\",\n\"postalCode\": \"111111\",\n\"line1\": \"Adress line 1\",\n\"zip\": \"222222\"\n}]     \n}\n}"
              },
              "options": {
                "graphql": {}
              }
            },
            "url": "{{url}}"
          },
          "response": []
        }
      ],
      "_postman_id": "07d13392-1be6-4be4-b11f-3a25ac5d72da"
    },
    {
      "name": "Json body Node.js",
      "item": [
        {
          "name": "Json Node.js",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "09ffb375-7363-451f-81a7-95831d6a7719",
                "exec": [
                  "//chai.js\r",
                  "var jsonData = pm.response.json();\r",
                  "pm.test(\"to.equal есть свойство countryCode\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.addresses.items[0].countryCode).to.equal('USA');\r",
                  "})\r",
                  "\r",
                  "\r",
                  "//node.js - то же, что и chai.js выше\r",
                  "const assert = require('assert');\r",
                  "pm.test(\"строгое равенство Test through the: assert.ok\", function () {\r",
                  "    assert.ok(jsonData.data.createOrganization.addresses.items[0].countryCode === \"USA\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"строгое равенство Test through the: assert\", function () {\r",
                  "    assert(jsonData.data.createOrganization.addresses.items[0].countryCode === \"USA\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test through the: assert.ok\", function () {\r",
                  "    assert.ok(jsonData.data.createOrganization.addresses.items[0].countryCode == \"USA\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test through the: assert\", function () {\r",
                  "    assert(jsonData.data.createOrganization.addresses.items[0].countryCode == \"USA\");\r",
                  "});\r",
                  "\r",
                  "//В этом тесте 2 аргумента: что сравниваем, с чем сравниваем\r",
                  "pm.test(\"Через assert.equal ==\", function () {\r",
                  "    assert.equal(jsonData.data.createOrganization.name,\"Organization_noneed\");\r",
                  "});\r",
                  "\r",
                  "\r",
                  "//deep для сравнения дочернего элемента. при  этом строка в кавычкам\r",
                  "pm.test(\"Через assert.deepEqual ==\", function () {\r",
                  "    assert.deepEqual(jsonData.data.createOrganization.addresses.items[0].countryCode,\"USA\");\r",
                  "});\r",
                  "\r",
                  "//deep для сравнения дочернего элемента. при  этом массив только в {} скобках\r",
                  "pm.test(\"Через assert.deepEqual ==\", function () {\r",
                  "    assert.deepEqual(jsonData.data.createOrganization.addresses.items[0],{\r",
                  "                        \"city\": \"111\",\r",
                  "                        \"countryCode\": \"USA\",\r",
                  "                        \"countryName\": \"United States of America\",\r",
                  "                        \"regionId\": \"AL\",\r",
                  "                        \"regionName\": \"Alabama\",\r",
                  "                        \"postalCode\": \"111111\",\r",
                  "                        \"line1\": \"Adress line 1\",\r",
                  "                        \"zip\": \"222222\"\r",
                  "                    });\r",
                  "});\r",
                  "\r",
                  "// equal ==\r",
                  "// strictEqual ===\r",
                  "\r",
                  "pm.test(\"Через assert.strictEqual строка равно строка ===\", function () {\r",
                  "    assert.strictEqual(jsonData.data.createOrganization.addresses.items[0].countryCode,\"USA\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Через assert.strictEqual строка не арвно число ===\", function () {\r",
                  "    assert.strictEqual(jsonData.data.createOrganization.addresses.items[0].countryCode,11);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "ffd4e327-e263-4685-95ef-6a37af1da6c2",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "67d3823c-eae2-4ce3-8380-adb27fc6233b",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "api_key",
                "value": "ce3d045144724f2b9ad070180f3c7b82",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation createOrganization ($command: InputCreateOrganizationType!) {\ncreateOrganization (command: $command) {\nid\nname\naddresses {\nitems {\ncity\ncountryCode\ncountryName\nregionId\nregionName\npostalCode\nline1\nzip\n}\n}   \n}\n} ",
                "variables": "{\n\"command\": {\n\"name\":\"{{organization_name}}\",   \n\"addresses\": [{\n\"addressType\": 1,\n\"city\": \"111\",\n\"countryCode\": \"USA\",\n\"countryName\": \"United States of America\",\n\"regionId\": \"AL\",\n\"regionName\": \"Alabama\",\n\"postalCode\": \"111111\",\n\"line1\": \"Adress line 1\",\n\"zip\": \"222222\"\n}]     \n}\n}"
              },
              "options": {
                "graphql": {}
              }
            },
            "url": "{{url}}"
          },
          "response": []
        }
      ],
      "_postman_id": "10bcec85-b72e-4f26-9c75-d4a27644a116"
    },
    {
      "name": "Типы элементов",
      "item": [
        {
          "name": ".a Chai.js",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1f72d8de-0317-40b4-bb56-908e3a812dec",
                "exec": [
                  "var jsonData = pm.response.json();\r",
                  "//a=an. Если необходимо убедиться, что это общеизвестный тип данных (строка, массив, объект и т.д.)\r",
                  "pm.test(\"Проверяем тип свойства - число\", function () {\r",
                  "pm.expect(jsonData.data.createOrganization.addresses.items[0].postalCode).to.be.a(\"number\");\r",
                  "})\r",
                  "\r",
                  "pm.test(\"Проверяем тип свойства - строка \", function () {\r",
                  "pm.expect(jsonData.data.createOrganization.addresses.items[0].postalCode).to.be.a(\"String\");\r",
                  "})\r",
                  "\r",
                  "pm.test(\"Проверяем тип свойства - объект \", function () {\r",
                  "pm.expect(jsonData).to.be.a(\"object\");\r",
                  "})\r",
                  "\r",
                  "pm.test(\"Проверяем массив\", function () {\r",
                  "pm.expect(jsonData.data.createOrganization.addresses.items).to.have.an(\"array\");\r",
                  "})\r",
                  "\r",
                  "pm.test(\"Проверяем дочерний объект\", function () {\r",
                  "pm.expect(jsonData.data.createOrganization).to.have.an(\"object\");\r",
                  "})\r",
                  "// обязательно учитывать deep для цепочек\r",
                  "pm.test(\"Проверяем цепочку проверок\", function () {\r",
                  "pm.expect(jsonData.data.createOrganization.addresses.items).to.have.an(\"array\").that.deep.includes({\r",
                  "                        \"city\": \"111\",\r",
                  "                        \"countryCode\": \"USA\",\r",
                  "                        \"countryName\": \"United States of America\",\r",
                  "                        \"regionId\": \"AL\",\r",
                  "                        \"regionName\": \"Alabama\",\r",
                  "                        \"postalCode\": \"111111\",\r",
                  "                        \"line1\": \"Adress line 1\",\r",
                  "                        \"zip\": \"222222\"\r",
                  "                    });\r",
                  "})\r",
                  "\r",
                  "pm.test(\"that.is.a - строка\", function () {\r",
                  "pm.expect(jsonData.data.createOrganization).to.have.property(\"name\").that.is.a(\"string\");\r",
                  "})\r",
                  "\r",
                  "pm.test(\"that.is.a через цепочку - строка\", function () {\r",
                  "pm.expect(jsonData.data.createOrganization.addresses.items[0]).to.have.property(\"postalCode\").that.is.a(\"string\");\r",
                  "})"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "87967788-49df-4f95-bf31-c024ed9a4072",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "16da0e03-4729-4cc1-9cab-8a2edf313c3c",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "api_key",
                "value": "ce3d045144724f2b9ad070180f3c7b82",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation createOrganization ($command: InputCreateOrganizationType!) {\ncreateOrganization (command: $command) {\nid\nname\naddresses {\nitems {\ncity\ncountryCode\ncountryName\nregionId\nregionName\npostalCode\nline1\nzip\n}\n}   \n}\n} ",
                "variables": "{\n\"command\": {\n\"name\":\"{{organization_name}}\",   \n\"addresses\": [{\n\"addressType\": 1,\n\"city\": \"111\",\n\"countryCode\": \"USA\",\n\"countryName\": \"United States of America\",\n\"regionId\": \"AL\",\n\"regionName\": \"Alabama\",\n\"postalCode\": \"111111\",\n\"line1\": \"Adress line 1\",\n\"zip\": \"222222\"\n}]     \n}\n}"
              },
              "options": {
                "graphql": {}
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "конструктор instanceOf",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7928c334-c6b0-44f5-808f-94b29f11775c",
                "exec": [
                  "var jsonData = pm.response.json();\r",
                  "\r",
                  "// instanceOf лучше использовать когда проверяется создание объекта с помощью какого-то конструктора.\r",
                  "pm.test(\"Проверяем items instanceOf массив\", function () {\r",
                  "pm.expect(jsonData.data.createOrganization.addresses.items).to.be.an.instanceOf(Array);\r",
                  "})\r",
                  "\r",
                  "pm.test(\"Проверяем items instanceOf Array and Object\", function () {\r",
                  "pm.expect(jsonData.data.createOrganization.addresses.items).to.be.an.instanceOf(Array).and.to.be.an.instanceOf(Object);\r",
                  "})\r",
                  "\r",
                  "pm.test(\"Проверяем items instanceOf Object\", function () {\r",
                  "pm.expect(jsonData.data.createOrganization.addresses.items).to.be.an.instanceOf(Object);\r",
                  "})\r",
                  "\r",
                  "//  тест упадет, так как items не являются частью массива Cat \r",
                  "function Cat () {}\r",
                  "pm.test(\"Проверяем items - массив\", function () {\r",
                  "pm.expect(jsonData.data.createOrganization.addresses.items).to.be.an.instanceOf(Cat);\r",
                  "})"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "cf7f9b89-5abc-466c-93f9-854e18e0dafb",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "c19e08ba-022c-436e-9ac8-d2553e494630",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "api_key",
                "value": "ce3d045144724f2b9ad070180f3c7b82",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation createOrganization ($command: InputCreateOrganizationType!) {\ncreateOrganization (command: $command) {\nid\nname\naddresses {\nitems {\ncity\ncountryCode\ncountryName\nregionId\nregionName\npostalCode\nline1\nzip\n}\n}   \n}\n} ",
                "variables": "{\n\"command\": {\n\"name\":\"{{organization_name}}\",   \n\"addresses\": [{\n\"addressType\": 1,\n\"city\": \"111\",\n\"countryCode\": \"USA\",\n\"countryName\": \"United States of America\",\n\"regionId\": \"AL\",\n\"regionName\": \"Alabama\",\n\"postalCode\": \"111111\",\n\"line1\": \"Adress line 1\",\n\"zip\": \"222222\"\n}]     \n}\n}"
              },
              "options": {
                "graphql": {}
              }
            },
            "url": "{{url}}"
          },
          "response": []
        }
      ],
      "_postman_id": "180252f0-e562-4b9d-86d0-4b17140a14d3"
    },
    {
      "name": "other",
      "item": [
        {
          "name": "createOrg test",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "90b7782c-b19f-47b7-9941-9774305a13ec",
                "exec": [
                  "pm.test(\"Create_organization\", () => {\r",
                  "pm.expect(pm.response.code).to.eql(200);\r",
                  "\r",
                  "const responseJson = pm.response.json();\r",
                  "pm.collectionVariables.set(\"organization_id\", responseJson.data.createOrganization.id);\r",
                  "const globalOrganizationId = postman.getGlobalVariable(\"organization_id\")\r",
                  "\r",
                  "console.log(globalOrganizationId)});\r",
                  "console.log(pm.response);\r",
                  "console.log(pm.response.json());\r",
                  "\r",
                  "\r",
                  "\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "b82b18af-d69a-45b7-a097-abd317aed3f5",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "ddc28ea8-36b9-455a-abc3-7b4201df00ab",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "api_key",
                "value": "ce3d045144724f2b9ad070180f3c7b82",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation createOrganization ($command: InputCreateOrganizationType!) {\ncreateOrganization (command: $command) {\nid\nname\naddresses {\nitems {\ncity\ncountryCode\ncountryName\nregionId\nregionName\npostalCode\nline1\nzip\n}\n}   \n}\n} ",
                "variables": "{\n\"command\": {\n\"name\":\"{{organization_name}}\",   \n\"addresses\": [{\n\"addressType\": 1,\n\"city\": \"111\",\n\"countryCode\": \"USA\",\n\"countryName\": \"United States of America\",\n\"regionId\": \"AL\",\n\"regionName\": \"Alabama\",\n\"postalCode\": \"111111\",\n\"line1\": \"Adress line 1\",\n\"zip\": \"222222\"\n}]     \n}\n}"
              },
              "options": {
                "graphql": {}
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "getCountries Copy",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a5040432-be86-496b-a40c-c199d33a86e5",
                "exec": [
                  "/*pm.test(\"getCountries\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});*/\r",
                  "\r",
                  "// объявление переменной JsonData вынесена за скобки: 1. Потому что мы ориентируется не на тест, а чтобы достать информацию 2.Если необходимо написать множество тестов, например на разные страны, то придеться постоянно обращаться к данному элементу JsonData.\r",
                  "var jsonData = pm.response.json();\r",
                  "\r",
                  "andorra = jsonData.data.countries[5].name\r",
                  "console.log (andorra)\r",
                  "pm.test(\"Your test name\", function () {\r",
                  "    pm.expect(andorra).to.eql(\"Andorra\");\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "3c01bf6d-5a4e-4e20-94bc-ea41ebfe9922",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query{\r\n    countries{\r\n        id,\r\n        name,\r\n        regions{\r\n            id,\r\n            name\r\n        }\r\n    }\r\n}",
                "variables": ""
              },
              "options": {
                "graphql": {}
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "createdOrganizationExisted",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4e085f38-0514-4d3e-b4e2-c1bc126ccb96",
                "exec": [
                  "/*pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "// тест найти созданную компании в базе данных, тест не ЗАКОНЧЕН!!!\r",
                  "pm.test(\"Test through the: to.match\", () => {\r",
                  "    pm.expect('name').to.include('{{organization_name}}');\r",
                  "});*/\r",
                  "\r",
                  "var jsonData = pm.response.json();\r",
                  "console.log(jsonData.data);\r",
                  "console.log(jsonData [\"data\"]);\r",
                  "console.log(jsonData ['data']);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "65cbd0d1-3bb4-4f3d-aa4f-8e8924abae33",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "d087114a-6399-4312-b9c0-e142449a7fe2",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "api_key",
                "value": "ce3d045144724f2b9ad070180f3c7b82",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query ($id: String!){\n\torganization (id: $id) {\n\tid\n    name\n}\n}",
                "variables": "{\r\n\"command\": {\r\n\"name\": \"Contact_xapi_test\",\r\n\"organization\": \"{{organization_id}}\"\r\n}\r\n}"
              },
              "options": {
                "graphql": {}
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "checkUsernameUniquenessFalse Copy",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a66d54a3-d3cf-4495-af1c-6b278dbce544",
                "exec": [
                  "pm.test(\"Your test name\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    console.log(pm.response);\r",
                  "    // консоль ниже выводит объект: тело ответа. Например если нужно написать тест на то, что почта уже есть в базе, и должно прийти сообщение о не уникальности\r",
                  "    console.log(jsonData);\r",
                  "    pm.expect(jsonData.value).to.eql(200);\r",
                  "});  \r",
                  "\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "0dd5a53c-cd17-41e2-8017-3261eb213f3e",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query {\r\n  checkUsernameUniqueness (username: \"BusinessQA\")\r\n} ",
                "variables": ""
              },
              "options": {
                "graphql": {}
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "dadata",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3881cca4-1a5d-4b8a-85f3-0dc88c0910f7",
                "exec": [
                  "pm.test(\"Your test name\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    console.log (jsonData.suggestions[2])\r",
                  "    pm.expect(jsonData.value).to.eql(\"Андрей Малахов\");\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "950221a1-4cf4-4158-8878-6e307baae130",
          "protocolProfileBehavior": {
            "disableBodyPruning": true,
            "disabledSystemHeaders": {
              "accept": true
            }
          },
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "X-Secret",
                "value": "feb759f3b83be418b25e4ed14ac732d9a8ec3c65",
                "type": "text",
                "disabled": true
              },
              {
                "key": "Authorization",
                "value": "Token 7fade796d622ec71a6bd51f16a8c3a97703b4249",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\"query\": \"Андрей Мал\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "https://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/fio"
          },
          "response": []
        }
      ],
      "_postman_id": "3de4894c-d569-4e82-85a3-7e8b074e53cc"
    },
    {
      "name": "variables",
      "item": [
        {
          "name": "local variables",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "200f36e7-5e20-499b-a345-48347b6c3047",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "135c465d-651a-4843-9119-f0152c7f27eb",
                "exec": [
                  "// вариант 1 - установка переменной без названия\r",
                  "x=3;\r",
                  "// обращение к переменной: x\r",
                  "x\r",
                  "console.log(x);\r",
                  "\r",
                  "// вариант 2 - установка переменной через var \r",
                  "var jsonData = pm.response.json();\r",
                  "// обращение к переменной: pm.response (jsonData);\r",
                  "pm.response (jsonData);\r",
                  "console.log(jsonData);\r",
                  "\r",
                  "// вариант 2.1 -универсальная перменная\r",
                  "pm.variables.set(\"key\", \"value\");\r",
                  "// обращение к переменной: pm.variables.get(\"key\");\r",
                  "pm.variables.get(\"key\");\r",
                  "console.log(pm.variables.get(\"key\"));\r",
                  "\r",
                  "// вариант 2.2\r",
                  "pm.variables.set(\"key\", 10);\r",
                  "console.log(pm.variables.get(\"key\"));\r",
                  "\r",
                  "// вариант 2.3\r",
                  "pm.variables.set(\"key\", {x:4,y:6});\r",
                  "console.log(pm.variables.get(\"key\"));\r",
                  "\r",
                  "// вариант 2.4\r",
                  "pm.variables.set(\"key\", jsonData.data.createOrganization.name);\r",
                  "console.log(pm.variables.get(\"key\")); \r",
                  "\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "a078bec7-291f-4be6-abe8-97d391deb565",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "api_key",
                "value": "ce3d045144724f2b9ad070180f3c7b82",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation createOrganization ($command: InputCreateOrganizationType!) {\ncreateOrganization (command: $command) {\nid\nname\naddresses {\nitems {\ncity\ncountryCode\ncountryName\nregionId\nregionName\npostalCode\nline1\nzip\n}\n}   \n}\n} ",
                "variables": "{\n\"command\": {\n\"name\":\"{{organization_name}}\",   \n\"addresses\": [{\n\"addressType\": 1,\n\"city\": \"New-York\",\n\"countryCode\": \"USA\",\n\"countryName\": \"United States of America\",\n\"regionId\": \"AL\",\n\"regionName\": \"Alabama\",\n\"postalCode\": \"830000\",\n\"line1\": \"{{line1}}\",\n\"zip\": \"830001\"\n}]     \n}\n}"
              },
              "options": {
                "graphql": {}
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "data variables",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "447334c2-dc0e-4c47-9a2a-fab177e710f8",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "977b5145-0990-49b7-873f-b29284065c36",
                "exec": [
                  "// create and set нельзя!\r",
                  "\r",
                  "// вариант 1 \r",
                  "data.mail\r",
                  "console.log(data.mail);\r",
                  "\r",
                  "// вариант 2\r",
                  "pm.iterationData.get(\"mail\");\r",
                  "console.log(pm.iterationData.get(\"mail\"));\r",
                  "\r",
                  "// вариант 2.1 - значение pm.iterationData.get(\"mail\") присваиваем локальной переменной mymail для упрощения записи\r",
                  "mymail = pm.iterationData.get(\"mail\");\r",
                  "console.log(mymail);\r",
                  "\r",
                  "// вариант 3 - универсальная запись, работает для ЛЮБОЙ переменой, установленной через set \r",
                  "pm.variables.get(\"mail\");\r",
                  "console.log(pm.variables.get(\"mail\"));\r",
                  "\r",
                  " "
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "a780e44a-ea5f-44ae-9137-77c6496f7384",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "api_key",
                "value": "ce3d045144724f2b9ad070180f3c7b82",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation createOrganization ($command: InputCreateOrganizationType!) {\ncreateOrganization (command: $command) {\nid\nname\naddresses {\nitems {\ncity\ncountryCode\ncountryName\nregionId\nregionName\npostalCode\nline1\nzip\n}\n}   \n}\n} ",
                "variables": "{\n\"command\": {\n\"name\":\"{{organization_name}}\",   \n\"addresses\": [{\n\"addressType\": 1,\n\"city\": \"New-York\",\n\"countryCode\": \"USA\",\n\"countryName\": \"United States of America\",\n\"regionId\": \"AL\",\n\"regionName\": \"Alabama\",\n\"postalCode\": \"830000\",\n\"line1\": \"{{line1}}\",\n\"zip\": \"830001\"\n}]     \n}\n}"
              },
              "options": {
                "graphql": {}
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "envoronment variables",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "38efed73-0251-4b14-993a-326a6d5fa424",
                "exec": [
                  "\r",
                  "// вариант 1 - Строка из GUI справа \r",
                  "pm.environment.get(\"Строка из GUI\");\r",
                  "console.log(pm.environment.get(\"Строка из GUI\"));\r",
                  "\r",
                  "// вариант 2 - snippets\r",
                  "pm.environment.set(\"name\", \"Ivan\");\r",
                  "pm.environment.get(\"name\");\r",
                  "console.log(pm.environment.get(\"name\"));\r",
                  "\r",
                  "// вариант 3 - универсальный\r",
                  "pm.variables.set(\"number\", 10);\r",
                  "pm.variables.get(\"number\")\r",
                  "console.log(pm.variables.get(\"number\"));\r",
                  "\r",
                  "// удаление переменной\r",
                  "pm.environment.set(\"LastName\", \"Ivanov\");\r",
                  "pm.environment.get(\"LastName\");\r",
                  "console.log(pm.environment.get(\"LastName\"));\r",
                  "pm.environment.unset(\"LastName\");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "f9643363-d075-43c3-8d83-1765401d4831",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "c320e896-9539-4547-9e36-b3c430e94cc0",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "api_key",
                "value": "ce3d045144724f2b9ad070180f3c7b82",
                "type": "text",
                "disabled": true
              },
              {
                "key": "test",
                "value": "{{Строка из GUI}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation createOrganization ($command: InputCreateOrganizationType!) {\ncreateOrganization (command: $command) {\nid\nname\naddresses {\nitems {\ncity\ncountryCode\ncountryName\nregionId\nregionName\npostalCode\nline1\nzip\n}\n}   \n}\n} ",
                "variables": "{\n\"command\": {\n\"name\":\"{{organization_name}}\",   \n\"addresses\": [{\n\"addressType\": 1,\n\"city\": \"New-York\",\n\"countryCode\": \"USA\",\n\"countryName\": \"United States of America\",\n\"regionId\": \"AL\",\n\"regionName\": \"Alabama\",\n\"postalCode\": \"830000\",\n\"line1\": \"{{line1}}\",\n\"zip\": \"830001\"\n}]     \n}\n}"
              },
              "options": {
                "graphql": {}
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "global variables",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "99287d04-a862-49cf-b02c-886774f3014f",
                "exec": [
                  "// вариант 1 - Строка из GUI справа \r",
                  "pm.globals.get(\"global\");\r",
                  "console.log(pm.globals.get(\"global\"));\r",
                  "\r",
                  "// вариант 2 - snippets\r",
                  "pm.globals.set(\"global\", \"test\");\r",
                  "pm.globals.get(\"global\");\r",
                  "console.log(pm.globals.get(\"global\"));\r",
                  "\r",
                  "// вариант 3 - универсальный\r",
                  "pm.variables.set(\"xyz\", 55);\r",
                  "pm.variables.get(\"xyz\")\r",
                  "console.log(pm.variables.get(\"xyz\"));\r",
                  "\r",
                  "// удаление переменной\r",
                  "pm.globals.set(\"xyz\", 55);\r",
                  "pm.globals.get(\"xyz\");\r",
                  "console.log(pm.globals.get(\"xyz\"));\r",
                  "pm.globals.unset(\"xyz\");\r",
                  "console.log(pm.globals.get(\"xyz\"));\r",
                  "\r",
                  "// сравнение переменной и строки. конкантинация данных\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.globals.set(\"name_test\", \"noneed\");\r",
                  "pm.test(\"Your test name\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.name).to.eql(\"Organization_\" + pm.globals.get(\"name_test\"));\r",
                  "});\r",
                  "console.log(\"Organization_\" + pm.globals.get(\"name_test\"));"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "7fc7b976-1791-4e80-ae1b-f41d81963e96",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "2690c540-0096-45de-86c3-3690e74f4554",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "api_key",
                "value": "ce3d045144724f2b9ad070180f3c7b82",
                "type": "text",
                "disabled": true
              },
              {
                "key": "test",
                "value": "{{Строка из GUI}}",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation createOrganization ($command: InputCreateOrganizationType!) {\ncreateOrganization (command: $command) {\nid\nname\naddresses {\nitems {\ncity\ncountryCode\ncountryName\nregionId\nregionName\npostalCode\nline1\nzip\n}\n}   \n}\n} ",
                "variables": "{\n\"command\": {\n\"name\":\"{{organization_name}}\",   \n\"addresses\": [{\n\"addressType\": 1,\n\"city\": \"New-York\",\n\"countryCode\": \"USA\",\n\"countryName\": \"United States of America\",\n\"regionId\": \"AL\",\n\"regionName\": \"Alabama\",\n\"postalCode\": \"830000\",\n\"line1\": \"{{line1}}\",\n\"zip\": \"830001\"\n}]     \n}\n}"
              },
              "options": {
                "graphql": {}
              }
            },
            "url": "{{url}}"
          },
          "response": []
        }
      ],
      "_postman_id": "e7727aa6-c3fc-4776-a388-a3b5fbdbd826"
    },
    {
      "name": "условия и циклы",
      "item": [
        {
          "name": "if",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "752fb63e-ded4-41b0-8362-458aa8e80206",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "5b31ffa6-884b-471b-a6d9-f68380562f0d",
                "exec": [
                  "// сработает\r",
                  "if (3 > 1) {\r",
                  "    console.log(\"3 больше 1\")\r",
                  "}\r",
                  "\r",
                  "if (1 == 1) {\r",
                  "    console.log(\"1==1\")\r",
                  "}\r",
                  "\r",
                  "x=5\r",
                  "y=5\r",
                  "if (x == y) {\r",
                  "    console.log(\"x==y==5\")\r",
                  "}\r",
                  "\r",
                  "if (true) {\r",
                  "    console.log(\"Сработает на true\")\r",
                  "}\r",
                  "\r",
                  "if (\"false\") {\r",
                  "    console.log(\"false\")\r",
                  "}\r",
                  "if (\"простая строка\") {\r",
                  "    console.log(\"простая строка\")\r",
                  "}\r",
                  "\r",
                  "if (-33) {\r",
                  "    console.log(\"-33\")\r",
                  "}\r",
                  "\r",
                  "if (1+1+1) {\r",
                  "    console.log(\"1+1+1\")\r",
                  "}\r",
                  "\r",
                  "// не сработает\r",
                  "if (\"\") {\r",
                  "    console.log(\"пусто\")\r",
                  "}\r",
                  "\r",
                  "if (0) {\r",
                  "    console.log(\"0\")\r",
                  "}\r",
                  "\r",
                  "if (undefined) {\r",
                  "    console.log(\"undefined\")\r",
                  "}\r",
                  "\r",
                  "if (null) {\r",
                  "    console.log(\"null\")\r",
                  "}\r",
                  "\r",
                  "if (NaN) {\r",
                  "    console.log(\"NaN\")\r",
                  "}\r",
                  "\r",
                  "if (false) {\r",
                  "    console.log(\"False\")\r",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "a707bf4d-9191-4ddc-b62b-0ffcda37f40e",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "api_key",
                "value": "ce3d045144724f2b9ad070180f3c7b82",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation createOrganization ($command: InputCreateOrganizationType!) {\ncreateOrganization (command: $command) {\nid\nname\naddresses {\nitems {\ncity\ncountryCode\ncountryName\nregionId\nregionName\npostalCode\nline1\nzip\n}\n}   \n}\n} ",
                "variables": "{\n\"command\": {\n\"name\":\"{{organization_name}}\",   \n\"addresses\": [{\n\"addressType\": 1,\n\"city\": \"New-York\",\n\"countryCode\": \"USA\",\n\"countryName\": \"United States of America\",\n\"regionId\": \"AL\",\n\"regionName\": \"Alabama\",\n\"postalCode\": \"830000\",\n\"line1\": \"{{line1}}\",\n\"zip\": \"830001\"\n}]     \n}\n}"
              },
              "options": {
                "graphql": {}
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "if else",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "820c6092-88b9-44ee-990e-ea59c5fd4f5c",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "df57d02c-f53e-4c66-82f5-3ef06689be28",
                "exec": [
                  "// сработает\r",
                  "if (3 > 5) {\r",
                  "    console.log(\"3 больше 1\")\r",
                  "} else {\r",
                  "    console.log(\"соответствие не верное 3 > 5\")\r",
                  "}\r",
                  "\r",
                  "if (1 == 2) {\r",
                  "    console.log(\"1==1\")\r",
                  "}else {\r",
                  "    console.log(\"соответствие не верное 1 == 2\")\r",
                  "}\r",
                  "\r",
                  "x=5\r",
                  "y=2\r",
                  "if (x == y) {\r",
                  "    console.log(\"x==y==5\")\r",
                  "}else {\r",
                  "    console.log(\"соответствие не верно x==y==5\")\r",
                  "}\r",
                  "\r",
                  "if (true) {\r",
                  "    console.log(\"Сработает на true и не сработает с else\")\r",
                  "} else {\r",
                  "    console.log(\"соответствие не верное\")\r",
                  "}\r",
                  "\r",
                  "// не сработает\r",
                  "if (\"\") {\r",
                  "    console.log(\"пусто\")\r",
                  "}else {\r",
                  "    console.log(\"соответствие не верное пусто\")\r",
                  "}\r",
                  "\r",
                  "if (0) {\r",
                  "    console.log(\"0\")\r",
                  "}else {\r",
                  "    console.log(\"соответствие не верное 0\")\r",
                  "}\r",
                  "\r",
                  "if (undefined) {\r",
                  "    console.log(\"undefined\")\r",
                  "}else {\r",
                  "    console.log(\"соответствие не верное undefined\")\r",
                  "}\r",
                  "\r",
                  "if (null) {\r",
                  "    console.log(\"null\")\r",
                  "}else {\r",
                  "    console.log(\"соответствие не верное null\")\r",
                  "}\r",
                  "\r",
                  "if (NaN) {\r",
                  "    console.log(\"NaN\")\r",
                  "}else {\r",
                  "    console.log(\"соответствие не верное NaN\")\r",
                  "}\r",
                  "\r",
                  "if (false) {\r",
                  "    console.log(\"False\")\r",
                  "}else {\r",
                  "    console.log(\"соответствие сработает с false и только в случае с else\")\r",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "dc7b2455-300a-4b74-999b-46b1ce39ec4b",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "api_key",
                "value": "ce3d045144724f2b9ad070180f3c7b82",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation createOrganization ($command: InputCreateOrganizationType!) {\ncreateOrganization (command: $command) {\nid\nname\naddresses {\nitems {\ncity\ncountryCode\ncountryName\nregionId\nregionName\npostalCode\nline1\nzip\n}\n}   \n}\n} ",
                "variables": "{\n\"command\": {\n\"name\":\"{{organization_name}}\",   \n\"addresses\": [{\n\"addressType\": 1,\n\"city\": \"New-York\",\n\"countryCode\": \"USA\",\n\"countryName\": \"United States of America\",\n\"regionId\": \"AL\",\n\"regionName\": \"Alabama\",\n\"postalCode\": \"830000\",\n\"line1\": \"{{line1}}\",\n\"zip\": \"830001\"\n}]     \n}\n}"
              },
              "options": {
                "graphql": {}
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "if create organization",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c085ef9f-32c5-4c55-bb09-9e524409303c",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "c946bf2d-c54b-4f03-a02b-c3b16af50cb8",
                "exec": [
                  "var jsonData = pm.response.json();\r",
                  "\r",
                  "// если итог будет false, то тесты показываться не будут.\r",
                  "if (pm.response.code === 200 ) {\r",
                  "pm.test(\"проверка по имени с некорректным кодом\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.name).to.eql(\"Organization_noneed\");\r",
                  "});  \r",
                  "}\r",
                  "\r",
                  "// если итог true - то на вкладке test results покажется результат теста\r",
                  "if (pm.response.code === 200 ) {\r",
                  "pm.test(\"проверка имени\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.name).to.eql(\"Organization_noneed\");\r",
                  "});  \r",
                  "\r",
                  "\r",
                  "pm.test(\"проверка города\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.addresses.items[0].city).to.eql(\"New-York\");\r",
                  "});  \r",
                  "}\r",
                  "\r",
                  "// Компания создалась, тогда проверяется город \r",
                  "var jsonData = pm.response.json();\r",
                  "if (jsonData.data.createOrganization.name === \"Organization_noneed\") {\r",
                  "pm.test(\"Компания создалась, тогда проверяется город\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.addresses.items[0].city).to.eql(\"New-York\");\r",
                  "});  \r",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "32e33e04-dcb3-4c75-a62f-edfbfba1e681",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "api_key",
                "value": "ce3d045144724f2b9ad070180f3c7b82",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation createOrganization ($command: InputCreateOrganizationType!) {\ncreateOrganization (command: $command) {\nid\nname\naddresses {\nitems {\ncity\ncountryCode\ncountryName\nregionId\nregionName\npostalCode\nline1\nzip\n}\n}   \n}\n} ",
                "variables": "{\n\"command\": {\n\"name\":\"{{organization_name}}\",   \n\"addresses\": [{\n\"addressType\": 1,\n\"city\": \"New-York\",\n\"countryCode\": \"USA\",\n\"countryName\": \"United States of America\",\n\"regionId\": \"AL\",\n\"regionName\": \"Alabama\",\n\"postalCode\": \"830000\",\n\"line1\": \"{{line1}}\",\n\"zip\": \"830001\"\n}]     \n}\n}"
              },
              "options": {
                "graphql": {}
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "if else create organization",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "1dbe9b6f-f963-4797-aefd-dc9e02363167",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "78174b63-a105-425b-8f72-e8af2102a9a1",
                "exec": [
                  "var jsonData = pm.response.json();\r",
                  "\r",
                  "// если итог будет false, то тесты показываться не будут.\r",
                  "if (pm.response.code === 404 ) {\r",
                  "pm.test(\"проверка по имени с некорректным кодом\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.name).to.eql(\"Organization_noneed\");\r",
                  "});  \r",
                  "} else {\r",
                  "    console.log(\"Error message: компания не создалась\")\r",
                  "}\r",
                  "\r",
                  "\r",
                  "// Компания НЕ создалась, тогда выводится ошибка на консоль\r",
                  "var jsonData = pm.response.json();\r",
                  "if (jsonData.data.createOrganization.name === \"Organization_noneed1\") {\r",
                  "pm.test(\"Компания создалась, тогда проверяется город\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.addresses.items[0].city).to.eql(\"New-York\");\r",
                  "});  \r",
                  "} else {\r",
                  "    console.log(\"Error message: компания не создалась\")\r",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "7f852840-fa64-4e31-9bfe-d3c1d0c3826a",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "api_key",
                "value": "ce3d045144724f2b9ad070180f3c7b82",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation createOrganization ($command: InputCreateOrganizationType!) {\ncreateOrganization (command: $command) {\nid\nname\naddresses {\nitems {\ncity\ncountryCode\ncountryName\nregionId\nregionName\npostalCode\nline1\nzip\n}\n}   \n}\n} ",
                "variables": "{\n\"command\": {\n\"name\":\"{{organization_name}}\",   \n\"addresses\": [{\n\"addressType\": 1,\n\"city\": \"New-York\",\n\"countryCode\": \"USA\",\n\"countryName\": \"United States of America\",\n\"regionId\": \"AL\",\n\"regionName\": \"Alabama\",\n\"postalCode\": \"830000\",\n\"line1\": \"{{line1}}\",\n\"zip\": \"830001\"\n}]     \n}\n}"
              },
              "options": {
                "graphql": {}
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "else if 1",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "1e544e5f-62d5-4372-92e1-014c2a4c926e",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "dc5e1a2d-4caf-43dc-98b5-48c396b25af1",
                "exec": [
                  "// сработает\r",
                  "if (3 > 5) {\r",
                  "    console.log(\"3 больше 1\")\r",
                  "} else if (6 > 5) {\r",
                  "    console.log(\"соответствие верное 6 > 5\")\r",
                  "} else {\r",
                  "    console.log(\"соответствие не верное 3 > 5\")\r",
                  "}\r",
                  "\r",
                  "// пример вариаций с else if \r",
                  "if (pm.response.code === 404) {\r",
                  "pm.test(\"код 200\", function () {\r",
                  "    pm.expect(jsonData.data.createOrganization.name).to.eql(\"Organization_noneed\");\r",
                  "});  \r",
                  "} else if (pm.expect(pm.response.code).to.be.below(201)){\r",
                  "    console.log(\"Error message: компания не создалась1\")\r",
                  "} else {\r",
                  "    console.log(\"Error message: компания не создалась3\")\r",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "2e459a8c-5515-4d24-b24d-065a1573f96f",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "api_key",
                "value": "ce3d045144724f2b9ad070180f3c7b82",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation createOrganization ($command: InputCreateOrganizationType!) {\ncreateOrganization (command: $command) {\nid\nname\naddresses {\nitems {\ncity\ncountryCode\ncountryName\nregionId\nregionName\npostalCode\nline1\nzip\n}\n}   \n}\n} ",
                "variables": "{\n\"command\": {\n\"name\":\"{{organization_name}}\",   \n\"addresses\": [{\n\"addressType\": 1,\n\"city\": \"New-York\",\n\"countryCode\": \"USA\",\n\"countryName\": \"United States of America\",\n\"regionId\": \"AL\",\n\"regionName\": \"Alabama\",\n\"postalCode\": \"830000\",\n\"line1\": \"{{line1}}\",\n\"zip\": \"830001\"\n}]     \n}\n}"
              },
              "options": {
                "graphql": {}
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "else if 2",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "91807dcf-fdc7-41b7-b466-28c1f5bfe83b",
                "exec": [
                  "var jsonData = pm.response.json();\r",
                  "\r",
                  "if (jsonData.data.createUser.succeeded === false) {\r",
                  "    console.log(\"Error message: Duplicate User Name\")  \r",
                  "} else if (jsonData.data.createUser.succeeded === true){\r",
                  "    console.log(\"User created\")\r",
                  "} else {\r",
                  "    console.log(\"Error message: User not created\")\r",
                  "};\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "60aece61-12d3-4adf-9ed3-9b2913471729",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "tokenName": "TokenAdmin",
                "password": "store",
                "username": "admin",
                "accessTokenUrl": "https://webstore-platform.qa.govirto.com/connect/token",
                "grant_type": "password_credentials",
                "addTokenTo": "header"
              }
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation createUser ($command: InputCreateUserType!) {\n    createUser (command: $command) {\n        errors {\n            code\n            description\n        }\n        succeeded\n      \n    }\n}",
                "variables": "{\n\"command\": {\n\"createdBy\": \"Main_User\",\n\"email\": \"{{user_email}}\",\n\"password\": \"{{user_password}}\",\n\"userName\": \"{{user_name}}\",\n\"userType\": \"Customer\",\n\"memberId\": \"{{contact_id}}\"\n}\n}"
              },
              "options": {
                "graphql": {}
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "while",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "77ac750b-f422-48a3-838d-73a465bcf74e",
                "exec": [
                  "bugs_count = 0\r",
                  "\r",
                  "while (bugs_count < 5) {\r",
                  "    console.log (\"Bug found \"+ bugs_count)\r",
                  "    bugs_count++;\r",
                  "}\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "b32186bf-49ae-46b1-bbca-3e60ff03a554",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "tokenName": "TokenAdmin",
                "password": "store",
                "username": "admin",
                "accessTokenUrl": "https://webstore-platform.qa.govirto.com/connect/token",
                "grant_type": "password_credentials",
                "addTokenTo": "header"
              }
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation createUser ($command: InputCreateUserType!) {\n    createUser (command: $command) {\n        errors {\n            code\n            description\n        }\n        succeeded\n      \n    }\n}",
                "variables": "{\n\"command\": {\n\"createdBy\": \"Main_User\",\n\"email\": \"{{user_email}}\",\n\"password\": \"{{user_password}}\",\n\"userName\": \"{{user_name}}\",\n\"userType\": \"Customer\",\n\"memberId\": \"{{contact_id}}\"\n}\n}"
              },
              "options": {
                "graphql": {}
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "for",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a9e24236-d209-44ef-9ee5-c96c86b32696",
                "exec": [
                  "/*for (var i = 0; i < 3; i++) {\r",
                  "    console.log (\"Bug found \"+ i)\r",
                  "}\r",
                  "\r",
                  "// вместо i++ можно написать i + 2 или i - 10\r",
                  "for (var i = 0; i < 3; i++) {\r",
                  "    console.log (\"Bug found \"+ i)\r",
                  "}*/\r",
                  "\r",
                  "// вместо i++ можно написать i + 2 или i - 10\r",
                  "for (var i = 0; i < 6; i = i + 2) {\r",
                  "    console.log (\"Bug found \"+ i)\r",
                  "}\r",
                  "\r",
                  "// вместо i++ можно написать i + 2 или i - 10\r",
                  "for (var i = 50; i > 6; i = i - 10) {\r",
                  "    console.log (\"Bug found \"+ i)\r",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "b85ce85e-6a7f-4a86-82e1-979997972451",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "tokenName": "TokenAdmin",
                "password": "store",
                "username": "admin",
                "accessTokenUrl": "https://webstore-platform.qa.govirto.com/connect/token",
                "grant_type": "password_credentials",
                "addTokenTo": "header"
              }
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation createUser ($command: InputCreateUserType!) {\n    createUser (command: $command) {\n        errors {\n            code\n            description\n        }\n        succeeded\n      \n    }\n}",
                "variables": "{\n\"command\": {\n\"createdBy\": \"Main_User\",\n\"email\": \"{{user_email}}\",\n\"password\": \"{{user_password}}\",\n\"userName\": \"{{user_name}}\",\n\"userType\": \"Customer\",\n\"memberId\": \"{{contact_id}}\"\n}\n}"
              },
              "options": {
                "graphql": {}
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "forEach",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "96f65f86-0349-4fbc-910f-e926a8e70a39",
                "exec": [
                  "var jsonData = pm.response.json();\r",
                  "\r",
                  "// для теста forEach  через => не получиться так как не выведется номерация, нужен индекс \r",
                  "jsonData.data.organization.addresses.items.forEach (function (element, i)\r",
                  "{\r",
                  "pm.test(\"forEach: first name:\" +\" new name \" + i, function () {\r",
                  "    pm.expect(element.firstName).to.eql(\"new name\");\r",
                  "});\r",
                  "}\r",
                  ");\r",
                  "\r",
                  "\r",
                  "// если необходимо провести действие с каждым элементом  массива\r",
                  "jsonData.data.organization.addresses.items.forEach (element => {\r",
                  "    console.log (element);\r",
                  "    console.log (\"break\");\r",
                  "    }\r",
                  "    );\r",
                  "\r",
                  "\r",
                  "//все 3 записи ниже выведут одинаковое значение на консоль\r",
                  "for (var i = 0; i < jsonData.data.organization.addresses.items.length; i ++) {\r",
                  "  console.log(jsonData.data.organization.addresses.items[i])\r",
                  "};\r",
                  "\r",
                  "jsonData.data.organization.addresses.items.forEach (element => console.log (element));\r",
                  "\r",
                  "jsonData.data.organization.addresses.items.forEach (function (element) {console.log (element)});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "ab73d30e-a6d1-4938-b936-5ae3adadfa16",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "tokenName": "TokenAdmin",
                "password": "store",
                "username": "admin",
                "accessTokenUrl": "https://webstore-platform.qa.govirto.com/connect/token",
                "grant_type": "password_credentials",
                "addTokenTo": "header"
              }
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation createUser ($command: InputCreateUserType!) {\n    createUser (command: $command) {\n        errors {\n            code\n            description\n        }\n        succeeded\n      \n    }\n}",
                "variables": "{\n\"command\": {\n\"createdBy\": \"Main_User\",\n\"email\": \"{{user_email}}\",\n\"password\": \"{{user_password}}\",\n\"userName\": \"{{user_name}}\",\n\"userType\": \"Customer\",\n\"memberId\": \"{{contact_id}}\"\n}\n}"
              },
              "options": {
                "graphql": {}
              }
            },
            "url": "{{url}}"
          },
          "response": []
        }
      ],
      "_postman_id": "0b5c0f76-e079-4566-8d70-a05dbed3dc90"
    }
  ],
  "auth": {
    "type": "oauth2",
    "oauth2": {
      "accessTokenUrl": "https://webstore-platform.qa.govirto.com/connect/token",
      "password": "store",
      "username": "admin",
      "clientId": "",
      "grant_type": "password_credentials",
      "tokenName": "Token_xapi",
      "addTokenTo": "header"
    }
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "32cdfdc8-817e-4d6f-b345-9583b7d9f6b3",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "45b2306a-7af7-4911-8d32-7d8b87a885fa",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "id": "7e0f4cb9-7b60-4182-bd19-f6a14638f463",
      "key": "url",
      "value": "https://webstore-platform.qa.govirto.com/graphql",
      "type": "string"
    },
    {
      "id": "a6707237-d82c-4de8-9d89-183572959f24",
      "key": "organization_id",
      "value": "",
      "type": "string"
    },
    {
      "id": "7129c825-94dd-405c-a5e3-d01937b4fc25",
      "key": "contact_id",
      "value": "",
      "type": "string"
    },
    {
      "id": "599e738e-3708-43ac-b7f6-ff91745b405d",
      "key": "organization_name",
      "value": "Organization_noneed",
      "type": "string"
    },
    {
      "id": "2dfe44ee-86b9-4fdd-972d-2b23c7260d11",
      "key": "user",
      "value": "User_noneed6",
      "type": "string"
    },
    {
      "id": "b14c7ad4-0729-40d1-9c7a-3c6d409a3b4c",
      "key": "password",
      "value": "Noneed3!",
      "type": "string"
    }
  ]
}